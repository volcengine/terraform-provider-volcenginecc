// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package alb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_alb_loadbalancer", loadBalancerDataSource)
}

// loadBalancerDataSource returns the Terraform volcenginecc_alb_loadbalancer data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::ALB::LoadBalancer resource.
func loadBalancerDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AddressIpVersion
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "IPv4",
		//	  "enum": [
		//	    "IPv4",
		//	    "DualStack"
		//	  ],
		//	  "type": "string"
		//	}
		"address_ip_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: BandwidthPackageId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"bandwidth_package_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: BusinessStatus
		// Cloud Control resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "Normal",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"business_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DNSName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DeleteProtection
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"delete_protection": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DeletedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"deleted_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EipBillingConfig
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "Bandwidth": {
		//	      "default": 1,
		//	      "maximum": 500,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "BillingType": {
		//	      "default": 2,
		//	      "enum": [
		//	        2,
		//	        3
		//	      ],
		//	      "type": "integer"
		//	    },
		//	    "ISP": {
		//	      "default": "BGP",
		//	      "enum": [
		//	        "BGP"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"eip_billing_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Bandwidth
				"bandwidth": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BillingType
				"billing_type": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ISP
				"isp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: GlobalAccelerator
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "AcceleratorId": {
		//	      "type": "string"
		//	    },
		//	    "AcceleratorListenerId": {
		//	      "type": "string"
		//	    },
		//	    "EndpointGroupId": {
		//	      "type": "string"
		//	    },
		//	    "Weight": {
		//	      "maximum": 100,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"global_accelerator": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AcceleratorId
				"accelerator_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: AcceleratorListenerId
				"accelerator_listener_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EndpointGroupId
				"endpoint_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Weight
				"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6EipBillingConfig
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "Bandwidth": {
		//	      "default": 1,
		//	      "maximum": 500,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "BillingType": {
		//	      "default": 3,
		//	      "enum": [
		//	        2,
		//	        3
		//	      ],
		//	      "type": "integer"
		//	    },
		//	    "ISP": {
		//	      "default": "BGP",
		//	      "enum": [
		//	        "BGP"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"ipv_6_eip_billing_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Bandwidth
				"bandwidth": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BillingType
				"billing_type": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ISP
				"isp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerBillingType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": 1,
		//	  "enum": [
		//	    1
		//	  ],
		//	  "type": "integer"
		//	}
		"load_balancer_billing_type": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerEdition
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "Basic",
		//	  "enum": [
		//	    "Basic",
		//	    "Standard"
		//	  ],
		//	  "type": "string"
		//	}
		"load_balancer_edition": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"load_balancer_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"load_balancer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LockReason
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"lock_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ModificationProtectionReason
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"modification_protection_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ModificationProtectionStatus
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "NonProtection",
		//	  "enum": [
		//	    "",
		//	    "NonProtection",
		//	    "ConsoleProtection"
		//	  ],
		//	  "type": "string"
		//	}
		"modification_protection_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: OverdueTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"overdue_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Region
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "Active",
		//	    "Provisioning",
		//	    "Configuring",
		//	    "Deleting",
		//	    "CreateFailed",
		//	    "Inactive"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// Cloud Control resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "public",
		//	    "private"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UpdateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WafInstanceId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"waf_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WafProtectedDomain
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"waf_protected_domain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WafProtectionEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "off",
		//	    "on"
		//	  ],
		//	  "type": "string"
		//	}
		"waf_protection_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ZoneMappings
		// Cloud Control resource type schema:
		//
		//	{
		//	  "items": {
		//	    "properties": {
		//	      "LoadBalancerAddresses": {
		//	        "items": {
		//	          "properties": {
		//	            "Eip": {
		//	              "properties": {
		//	                "AssociationMode": {
		//	                  "enum": [
		//	                    "Default",
		//	                    "Normal",
		//	                    ""
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Bandwidth": {
		//	                  "type": "integer"
		//	                },
		//	                "EipAddress": {
		//	                  "type": "string"
		//	                },
		//	                "EipBillingType": {
		//	                  "enum": [
		//	                    2,
		//	                    3
		//	                  ],
		//	                  "type": "integer"
		//	                },
		//	                "EipType": {
		//	                  "type": "string"
		//	                },
		//	                "ISP": {
		//	                  "enum": [
		//	                    "BGP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PopLocations": {
		//	                  "items": {
		//	                    "properties": {
		//	                      "PopId": {
		//	                        "type": "string"
		//	                      },
		//	                      "PopName": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "EipAddress": {
		//	              "type": "string"
		//	            },
		//	            "EipId": {
		//	              "type": "string"
		//	            },
		//	            "EniAddress": {
		//	              "type": "string"
		//	            },
		//	            "EniId": {
		//	              "type": "string"
		//	            },
		//	            "EniIpv6Address": {
		//	              "type": "string"
		//	            },
		//	            "Ipv6Eip": {
		//	              "properties": {
		//	                "Bandwidth": {
		//	                  "type": "integer"
		//	                },
		//	                "BillingType": {
		//	                  "enum": [
		//	                    2,
		//	                    3
		//	                  ],
		//	                  "type": "integer"
		//	                },
		//	                "ISP": {
		//	                  "enum": [
		//	                    "BGP"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "Ipv6EipId": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "SubnetId": {
		//	        "type": "string"
		//	      },
		//	      "ZoneId": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "SubnetId",
		//	      "ZoneId"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"zone_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: LoadBalancerAddresses
					"load_balancer_addresses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Eip
								"eip": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AssociationMode
										"association_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Bandwidth
										"bandwidth": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: EipAddress
										"eip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: EipBillingType
										"eip_billing_type": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: EipType
										"eip_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: ISP
										"isp": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PopLocations
										"pop_locations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: PopId
													"pop_id": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: PopName
													"pop_name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EipAddress
								"eip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EipId
								"eip_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EniAddress
								"eni_address": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EniId
								"eni_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EniIpv6Address
								"eni_ipv_6_address": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Ipv6Eip
								"ipv_6_eip": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Bandwidth
										"bandwidth": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: BillingType
										"billing_type": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: ISP
										"isp": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Ipv6EipId
								"ipv_6_eip_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SubnetId
					"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ZoneId
					"zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::ALB::LoadBalancer",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ALB::LoadBalancer").WithTerraformTypeName("volcenginecc_alb_loadbalancer")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"accelerator_id":                 "AcceleratorId",
		"accelerator_listener_id":        "AcceleratorListenerId",
		"address_ip_version":             "AddressIpVersion",
		"association_mode":               "AssociationMode",
		"bandwidth":                      "Bandwidth",
		"bandwidth_package_id":           "BandwidthPackageId",
		"billing_type":                   "BillingType",
		"business_status":                "BusinessStatus",
		"create_time":                    "CreateTime",
		"delete_protection":              "DeleteProtection",
		"deleted_time":                   "DeletedTime",
		"description":                    "Description",
		"dns_name":                       "DNSName",
		"eip":                            "Eip",
		"eip_address":                    "EipAddress",
		"eip_billing_config":             "EipBillingConfig",
		"eip_billing_type":               "EipBillingType",
		"eip_id":                         "EipId",
		"eip_type":                       "EipType",
		"endpoint_group_id":              "EndpointGroupId",
		"eni_address":                    "EniAddress",
		"eni_id":                         "EniId",
		"eni_ipv_6_address":              "EniIpv6Address",
		"global_accelerator":             "GlobalAccelerator",
		"ipv_6_eip":                      "Ipv6Eip",
		"ipv_6_eip_billing_config":       "Ipv6EipBillingConfig",
		"ipv_6_eip_id":                   "Ipv6EipId",
		"isp":                            "ISP",
		"key":                            "Key",
		"load_balancer_addresses":        "LoadBalancerAddresses",
		"load_balancer_billing_type":     "LoadBalancerBillingType",
		"load_balancer_edition":          "LoadBalancerEdition",
		"load_balancer_id":               "LoadBalancerId",
		"load_balancer_name":             "LoadBalancerName",
		"lock_reason":                    "LockReason",
		"modification_protection_reason": "ModificationProtectionReason",
		"modification_protection_status": "ModificationProtectionStatus",
		"overdue_time":                   "OverdueTime",
		"pop_id":                         "PopId",
		"pop_locations":                  "PopLocations",
		"pop_name":                       "PopName",
		"project_name":                   "ProjectName",
		"region":                         "Region",
		"status":                         "Status",
		"subnet_id":                      "SubnetId",
		"tags":                           "Tags",
		"type":                           "Type",
		"update_time":                    "UpdateTime",
		"value":                          "Value",
		"vpc_id":                         "VpcId",
		"waf_instance_id":                "WafInstanceId",
		"waf_protected_domain":           "WafProtectedDomain",
		"waf_protection_enabled":         "WafProtectionEnabled",
		"weight":                         "Weight",
		"zone_id":                        "ZoneId",
		"zone_mappings":                  "ZoneMappings",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
