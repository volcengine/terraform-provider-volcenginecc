// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package alb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_alb_listener", listenerResource)
}

// listenerResource returns the Terraform volcenginecc_alb_listener resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::ALB::Listener resource.
func listenerResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessLogRecordCustomizedHeadersEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"access_log_record_customized_headers_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"on",
					"off",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AclIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "maxItems": 5,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"acl_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(5),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AclStatus
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "description": "是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"acl_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("off"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"on",
					"off",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AclType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。",
		//	  "enum": [
		//	    "white",
		//	    "black",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"acl_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"white",
					"black",
					"",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CACertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。",
		//	  "type": "string"
		//	}
		"ca_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CACertificateSource
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "alb",
		//	  "description": "HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca_root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca_sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。",
		//	  "enum": [
		//	    "alb",
		//	    "pca_root",
		//	    "pca_sub",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"ca_certificate_source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca_root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca_sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("alb"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"alb",
					"pca_root",
					"pca_sub",
					"",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CertCenterCertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。",
		//	  "type": "string"
		//	}
		"cert_center_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。",
		//	  "type": "string"
		//	}
		"certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CertificateSource
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca_leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。",
		//	  "enum": [
		//	    "alb",
		//	    "cert_center",
		//	    "pca_leaf"
		//	  ],
		//	  "type": "string"
		//	}
		"certificate_source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca_leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"alb",
					"cert_center",
					"pca_leaf",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的创建时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CustomizedCfgId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "个性化配置ID，未绑定时值为空字符串。",
		//	  "type": "string"
		//	}
		"customized_cfg_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "个性化配置ID，未绑定时值为空字符串。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "",
		//	  "description": "监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。",
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString(""),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(0, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DomainExtensions
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "CertCenterCertificateId": {
		//	        "description": "域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。",
		//	        "type": "string"
		//	      },
		//	      "CertificateId": {
		//	        "description": "域名使用的服务器证书 ID。当证书来源为 alb 时生效。",
		//	        "type": "string"
		//	      },
		//	      "CertificateSource": {
		//	        "description": "域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。",
		//	        "enum": [
		//	          "alb",
		//	          "cert_center"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Domain": {
		//	        "description": "域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。",
		//	        "maxLength": 128,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      },
		//	      "DomainExtensionId": {
		//	        "description": "扩展域名 ID 。",
		//	        "type": "string"
		//	      },
		//	      "ListenerId": {
		//	        "description": "扩展域名所属的监听器 ID。",
		//	        "type": "string"
		//	      },
		//	      "PcaLeafCertificateId": {
		//	        "description": "HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。",
		//	        "type": "string"
		//	      },
		//	      "San": {
		//	        "description": "若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"domain_extensions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CertCenterCertificateId
					"cert_center_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: CertificateId
					"certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "域名使用的服务器证书 ID。当证书来源为 alb 时生效。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: CertificateSource
					"certificate_source": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"alb",
								"cert_center",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Domain
					"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 128),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: DomainExtensionId
					// Property: ListenerId
					// Property: PcaLeafCertificateId
					"pca_leaf_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: San
					"san": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(20),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnableHttp2
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "description": "HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"enable_http_2": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("off"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"on",
					"off",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnableQuic
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "description": "QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"enable_quic": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("off"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"on",
					"off",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Enabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "on",
		//	  "description": "监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。",
		//	  "enum": [
		//	    "on",
		//	    "off"
		//	  ],
		//	  "type": "string"
		//	}
		"enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("on"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"on",
					"off",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ListenerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器 ID。",
		//	  "type": "string"
		//	}
		"listener_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器 ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ListenerName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"listener_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器所属的负载均衡实例 ID。",
		//	  "type": "string"
		//	}
		"load_balancer_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器所属的负载均衡实例 ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PcaLeafCertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。",
		//	  "type": "string"
		//	}
		"pca_leaf_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PcaRootCACertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。",
		//	  "type": "string"
		//	}
		"pca_root_ca_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PcaSubCACertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。",
		//	  "type": "string"
		//	}
		"pca_sub_ca_certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Port
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的监听端口，取值：1 - 65535 。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "监听器的监听端口，取值：1 - 65535 。",
			Required:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1, 65535),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器所属项目名称。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器所属项目名称。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的协议，支持 HTTP 协议和 HTTPS 协议。",
		//	  "enum": [
		//	    "HTTP",
		//	    "HTTPS"
		//	  ],
		//	  "type": "string"
		//	}
		"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的协议，支持 HTTP 协议和 HTTPS 协议。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"HTTP",
					"HTTPS",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的默认服务器组。",
		//	  "type": "string"
		//	}
		"server_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的默认服务器组。",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: ServerGroups
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "关联监听器的所有服务器组。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "ServerGroupId": {
		//	        "description": "服务器组 ID 。",
		//	        "type": "string"
		//	      },
		//	      "ServerGroupName": {
		//	        "description": "服务器组名称。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"server_groups": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ServerGroupId
					"server_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "服务器组 ID 。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ServerGroupName
					"server_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "服务器组名称。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "关联监听器的所有服务器组。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。",
		//	  "enum": [
		//	    "Creating",
		//	    "Active",
		//	    "Pending",
		//	    "Disabled",
		//	    "Deleting"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器所属标签。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户标签的标签键。具体规则如下：长度限制为1～128个字符。大小写敏感。不能以volc:的任意大小写组合开头。不能以空格开头或结尾。允许包含各国语言文字、数字、空格）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。同一资源的标签键不允许重复。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户标签的标签值。具体规则如下：长度限制为0～256个字符。大小写敏感。不能以空格开头或结尾。允许包含各国语言文字、数字、空格（）、下划线（_）、点号（.）、半角冒（:）、斜杠（/）、等号（=）、加号（+）、减号（-）和@。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "监听器所属标签。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器最近一次的操作时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器最近一次的操作时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "每个 ALB 实例至少要有一个监听器才能正常工作。监听器接收客户端请求，并根据您配置的转发规则和负载均衡算法将请求分发到后端服务器上。您可以在一个 ALB 实例下创建多个监听器，并为监听器配置不同的监听协议，以处理使用不同协议的客户端请求。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ALB::Listener").WithTerraformTypeName("volcenginecc_alb_listener")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_log_record_customized_headers_enabled": "AccessLogRecordCustomizedHeadersEnabled",
		"acl_ids":                    "AclIds",
		"acl_status":                 "AclStatus",
		"acl_type":                   "AclType",
		"ca_certificate_id":          "CACertificateId",
		"ca_certificate_source":      "CACertificateSource",
		"cert_center_certificate_id": "CertCenterCertificateId",
		"certificate_id":             "CertificateId",
		"certificate_source":         "CertificateSource",
		"created_time":               "CreatedTime",
		"customized_cfg_id":          "CustomizedCfgId",
		"description":                "Description",
		"domain":                     "Domain",
		"domain_extension_id":        "DomainExtensionId",
		"domain_extensions":          "DomainExtensions",
		"enable_http_2":              "EnableHttp2",
		"enable_quic":                "EnableQuic",
		"enabled":                    "Enabled",
		"key":                        "Key",
		"listener_id":                "ListenerId",
		"listener_name":              "ListenerName",
		"load_balancer_id":           "LoadBalancerId",
		"pca_leaf_certificate_id":    "PcaLeafCertificateId",
		"pca_root_ca_certificate_id": "PcaRootCACertificateId",
		"pca_sub_ca_certificate_id":  "PcaSubCACertificateId",
		"port":                       "Port",
		"project_name":               "ProjectName",
		"protocol":                   "Protocol",
		"san":                        "San",
		"server_group_id":            "ServerGroupId",
		"server_group_name":          "ServerGroupName",
		"server_groups":              "ServerGroups",
		"status":                     "Status",
		"tags":                       "Tags",
		"updated_time":               "UpdatedTime",
		"value":                      "Value",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/ListenerId",
		"/properties/CreatedTime",
		"/properties/UpdatedTime",
		"/properties/Status",
		"/properties/ProjectName",
		"/properties/DomainExtensions/*/DomainExtensionId",
		"/properties/DomainExtensions/*/ListenerId",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/LoadBalancerId",
		"/properties/Protocol",
		"/properties/Port",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
