// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package alb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_alb_certificate", certificateDataSource)
}

// certificateDataSource returns the Terraform volcenginecc_alb_certificate data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::ALB::Certificate resource.
func certificateDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书ID。",
		//	  "type": "string"
		//	}
		"certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"certificate_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书类型，取值：CA：CA证书、Server：服务器证书。",
		//	  "enum": [
		//	    "CA",
		//	    "Server"
		//	  ],
		//	  "type": "string"
		//	}
		"certificate_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书类型，取值：CA：CA证书、Server：服务器证书。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书创建时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书描述。",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书描述。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书域名。",
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书域名。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ExpiredAt
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书过期时间。",
		//	  "type": "string"
		//	}
		"expired_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书过期时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Listeners
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书关联的监听器列表。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"listeners": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "证书关联的监听器列表。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrivateKey
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器证书的私钥，当证书类型为Server时必填。",
		//	  "type": "string"
		//	}
		"private_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器证书的私钥，当证书类型为Server时必填。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "项目名称。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "项目名称。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PublicKey
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器证书的公钥。",
		//	  "type": "string"
		//	}
		"public_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器证书的公钥。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: San
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。",
		//	  "type": "string"
		//	}
		"san": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "标签列表。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "标签列表。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::ALB::Certificate",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ALB::Certificate").WithTerraformTypeName("volcenginecc_alb_certificate")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"certificate_id":   "CertificateId",
		"certificate_name": "CertificateName",
		"certificate_type": "CertificateType",
		"created_time":     "CreatedTime",
		"description":      "Description",
		"domain_name":      "DomainName",
		"expired_at":       "ExpiredAt",
		"key":              "Key",
		"listeners":        "Listeners",
		"private_key":      "PrivateKey",
		"project_name":     "ProjectName",
		"public_key":       "PublicKey",
		"san":              "San",
		"status":           "Status",
		"tags":             "Tags",
		"value":            "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
