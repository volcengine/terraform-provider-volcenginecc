// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package alb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_alb_server_group", serverGroupResource)
}

// serverGroupResource returns the Terraform volcenginecc_alb_server_group resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::ALB::ServerGroup resource.
func serverGroupResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的创建时间。",
		//	  "type": "string"
		//	}
		"create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的创建时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的描述。",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的描述。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HealthCheck
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组健康检查配置信息。",
		//	  "properties": {
		//	    "Domain": {
		//	      "description": "健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。只有 HealthCheck.Protocol 设置为 HTTP 时该参数生效。需至少包含一个‘.’，且不允许以‘.’开头或结尾。域名每一级由字母、数字、‘-’、‘.’字符组成，且‘-’不得出现在每一级的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示负载均衡使用各后端服务器的私网IP地址进行健康检查。",
		//	      "type": "string"
		//	    },
		//	    "Enabled": {
		//	      "default": "on",
		//	      "description": "监听器是否开启健康检查功能。取值：on：开启（默认值）。off：不开启。",
		//	      "enum": [
		//	        "on",
		//	        "off"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "HealthyThreshold": {
		//	      "default": 3,
		//	      "description": "健康检查的健康阈值。表示连续执行指定次数的健康检查，结果均为正常的后端服务器将判定为健康检查正常。单位：次，取值：2~10，默认值为 3。",
		//	      "format": "int64",
		//	      "maximum": 10,
		//	      "minimum": 2,
		//	      "type": "integer"
		//	    },
		//	    "HttpCode": {
		//	      "description": "健康检查正常的HTTP状态码，多个状态码间用半角逗号分隔。只有 HealthCheck.Protocol 为 HTTP 时才存在该参数。取值如下：http_2xx（默认值）。http_3xx（默认值）。http_4xx 。http_5xx 。",
		//	      "type": "string"
		//	    },
		//	    "HttpVersion": {
		//	      "default": "HTTP1.0",
		//	      "description": "健康检查HTTP协议版本，只有 HealthCheck.Protocol 为 HTTP 时才存在该参数。取值：HTTP1.0（使用API时，HTTP协议版本默认值）。HTTP1.1。",
		//	      "enum": [
		//	        "HTTP1.0",
		//	        "HTTP1.1"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Interval": {
		//	      "default": 2,
		//	      "description": "开启健康检查后，执行健康检查的时间间隔。 单位：秒，取值：1~300s，默认值为 2。",
		//	      "format": "int64",
		//	      "maximum": 300,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "Method": {
		//	      "default": "HEAD",
		//	      "description": "开启健康检查后，健康检查的方法。只有 HealthCheck.Protocol 设置为 HTTP 时该参数生效。取值如下：GET：服务器需支持GET方法。HEAD（默认）：服务器仅返回HEAD头部信息，可以降低后端性能消耗，但服务器需要支持HEAD方法。",
		//	      "enum": [
		//	        "GET",
		//	        "HEAD"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "健康检查端口。支持取值：0（默认值）：使用后端服务器端口进行健康检查。1-65535：使用您指定的端口进行健康检查。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "Protocol": {
		//	      "default": "HTTP",
		//	      "description": "健康检查协议，当前支持HTTP、TCP。默认值为 HTTP。",
		//	      "enum": [
		//	        "HTTP",
		//	        "TCP"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Timeout": {
		//	      "default": 2,
		//	      "description": "健康检查的响应超时时间。表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查异常。单位：秒，取值：1~60，默认值为 2。",
		//	      "format": "int64",
		//	      "maximum": 60,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "URI": {
		//	      "description": "健康检查的路径，需配置为后端服务器上真实对外提供的路径。只有 HealthCheck.Protocol 设置为 HTTP 时该参数生效。必须以字符‘/’开头。仅包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘\u0026’、‘＝’ 字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。",
		//	      "type": "string"
		//	    },
		//	    "UnhealthyThreshold": {
		//	      "default": 3,
		//	      "description": "健康检查的不健康阈值。表示连续执行指定次数的健康检查，结果均为异常的后端服务器将判定为健康检查异常。单位：次，取值：2~10，默认值为 3。",
		//	      "format": "int64",
		//	      "maximum": 10,
		//	      "minimum": 2,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "Port"
		//	  ],
		//	  "type": "object"
		//	}
		"health_check": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Domain
				"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。只有 HealthCheck.Protocol 设置为 HTTP 时该参数生效。需至少包含一个‘.’，且不允许以‘.’开头或结尾。域名每一级由字母、数字、‘-’、‘.’字符组成，且‘-’不得出现在每一级的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示负载均衡使用各后端服务器的私网IP地址进行健康检查。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "监听器是否开启健康检查功能。取值：on：开启（默认值）。off：不开启。",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("on"),
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"on",
							"off",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HealthyThreshold
				"healthy_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的健康阈值。表示连续执行指定次数的健康检查，结果均为正常的后端服务器将判定为健康检查正常。单位：次，取值：2~10，默认值为 3。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(3),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(2, 10),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HttpCode
				"http_code": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查正常的HTTP状态码，多个状态码间用半角逗号分隔。只有 HealthCheck.Protocol 为 HTTP 时才存在该参数。取值如下：http_2xx（默认值）。http_3xx（默认值）。http_4xx 。http_5xx 。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HttpVersion
				"http_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查HTTP协议版本，只有 HealthCheck.Protocol 为 HTTP 时才存在该参数。取值：HTTP1.0（使用API时，HTTP协议版本默认值）。HTTP1.1。",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("HTTP1.0"),
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"HTTP1.0",
							"HTTP1.1",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Interval
				"interval": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "开启健康检查后，执行健康检查的时间间隔。 单位：秒，取值：1~300s，默认值为 2。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(2),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(1, 300),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Method
				"method": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "开启健康检查后，健康检查的方法。只有 HealthCheck.Protocol 设置为 HTTP 时该参数生效。取值如下：GET：服务器需支持GET方法。HEAD（默认）：服务器仅返回HEAD头部信息，可以降低后端性能消耗，但服务器需要支持HEAD方法。",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("HEAD"),
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"GET",
							"HEAD",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查端口。支持取值：0（默认值）：使用后端服务器端口进行健康检查。1-65535：使用您指定的端口进行健康检查。",
					Optional:    true,
					Computed:    true,
					Validators: []validator.Int64{ /*START VALIDATORS*/
						fwvalidators.NotNullInt64(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查协议，当前支持HTTP、TCP。默认值为 HTTP。",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("HTTP"),
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"HTTP",
							"TCP",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Timeout
				"timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的响应超时时间。表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查异常。单位：秒，取值：1~60，默认值为 2。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(2),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(1, 60),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: URI
				"uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的路径，需配置为后端服务器上真实对外提供的路径。只有 HealthCheck.Protocol 设置为 HTTP 时该参数生效。必须以字符‘/’开头。仅包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’ 字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: UnhealthyThreshold
				"unhealthy_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的不健康阈值。表示连续执行指定次数的健康检查，结果均为异常的后端服务器将判定为健康检查异常。单位：次，取值：2~10，默认值为 3。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(3),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(2, 10),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "服务器组健康检查配置信息。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IPAddressType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组的IP地址类型。目前只支持 IPv4",
		//	  "type": "string"
		//	}
		"ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组的IP地址类型。目前只支持 IPv4",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Listeners
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组关联的监听器信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "ListenerId": {
		//	        "description": "监听器的ID。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "ListenerId"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"listeners": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ListenerId
					"listener_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "监听器的ID。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "后端服务器组关联的监听器信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组所属项目名称。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组所属项目名称。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端协议：HTTP，HTTPS。",
		//	  "enum": [
		//	    "HTTP",
		//	    "HTTPS"
		//	  ],
		//	  "type": "string"
		//	}
		"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端协议：HTTP，HTTPS。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"HTTP",
					"HTTPS",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Scheduler
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "wrr",
		//	  "description": "调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。",
		//	  "enum": [
		//	    "wrr",
		//	    "wlc",
		//	    "sh"
		//	  ],
		//	  "type": "string"
		//	}
		"scheduler": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("wrr"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"wrr",
					"wlc",
					"sh",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerCount
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组内后端服务器的个数。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"server_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "服务器组内后端服务器的个数。",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的ID。",
		//	  "type": "string"
		//	}
		"server_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的名称。",
		//	  "type": "string"
		//	}
		"server_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的名称。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "instance",
		//	  "description": "后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。",
		//	  "enum": [
		//	    "instance",
		//	    "ip"
		//	  ],
		//	  "type": "string"
		//	}
		"server_group_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("instance"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"instance",
					"ip",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Servers
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组中服务器的信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Description": {
		//	        "description": "后端服务器的描述。",
		//	        "type": "string"
		//	      },
		//	      "InstanceId": {
		//	        "description": "云服务器实例或网卡的ID。",
		//	        "type": "string"
		//	      },
		//	      "Ip": {
		//	        "description": "后端服务器的私网IP地址。",
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "description": "后端服务器接收请求的端口号。",
		//	        "format": "int64",
		//	        "type": "integer"
		//	      },
		//	      "RemoteEnabled": {
		//	        "default": "off",
		//	        "description": "是否开启远端IP功能。当后端服务器实例类型为IP地址，即 Type 取值为 ip 时，此字段有效。取值：on：开启。off（默认值）：不开启。",
		//	        "enum": [
		//	          "on",
		//	          "off"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "ServerId": {
		//	        "description": "后端服务器ID。",
		//	        "type": "string"
		//	      },
		//	      "Type": {
		//	        "description": "后端服务器实例类型。ecs：云服务器实例。eni：辅助网卡。ip：IP地址（仅 Ip 类型服务器组有效）。",
		//	        "enum": [
		//	          "ecs",
		//	          "eni",
		//	          "ip"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Weight": {
		//	        "description": "后端服务器的权重。",
		//	        "format": "int64",
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "InstanceId",
		//	      "Type",
		//	      "Ip",
		//	      "Port"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"servers": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Description
					"description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的描述。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: InstanceId
					"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "云服务器实例或网卡的ID。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Ip
					"ip": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的私网IP地址。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "后端服务器接收请求的端口号。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.Int64{ /*START VALIDATORS*/
							fwvalidators.NotNullInt64(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: RemoteEnabled
					"remote_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "是否开启远端IP功能。当后端服务器实例类型为IP地址，即 Type 取值为 ip 时，此字段有效。取值：on：开启。off（默认值）：不开启。",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("off"),
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"on",
								"off",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ServerId
					"server_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器ID。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器实例类型。ecs：云服务器实例。eni：辅助网卡。ip：IP地址（仅 Ip 类型服务器组有效）。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"ecs",
								"eni",
								"ip",
							),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Weight
					"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的权重。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "后端服务器组中服务器的信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。",
		//	  "enum": [
		//	    "Creating",
		//	    "Active",
		//	    "Configuring",
		//	    "Deleting"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"Creating",
					"Active",
					"Configuring",
					"Deleting",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StickySessionConfig
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "会话保持功能的参数信息。",
		//	  "properties": {
		//	    "Cookie": {
		//	      "description": "服务配置的会话保持 Cookie 名称。仅在开启会话保持功能并选择重写 Cookie 时有效。 具体规则如下：Cookie 名称长度为1~200个字符。名称只能包含 ASCII 英文字母和数字字符，不能包含半角逗号（,）、半角分号（;）或空格，也不能以美元符号（$）开头。当 tickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 server时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，该参数无效。",
		//	      "maxLength": 200,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "CookieTimeout": {
		//	      "default": 1000,
		//	      "description": "会话保持 Cookie 超时时间。仅在开启会话保持功能并选择植入 Cookie 时有效。 单位：秒。具体规则如下：超时时间的取值范围：1～86400。 默认值为：1000。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionType 为 server 时，此参数无效。",
		//	      "format": "int64",
		//	      "maximum": 86400,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "StickySessionEnabled": {
		//	      "default": "off",
		//	      "description": "是否开启会话保持功能。on：开启；off（默认值）：关闭。",
		//	      "enum": [
		//	        "on",
		//	        "off"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "StickySessionType": {
		//	      "description": "对 Cookie 的处理方式。当 StickySessionConfig.StickySessionEnabled 值为 on 时，此字段参数必填。取值如下：insert：植入 Cookie；ALB 会记录客户端请求第一次转发到的后端服务器。ALB 在返回请求中植入 Cookie ，后续客户端请求携带此 Cookie，ALB 会将请求转发到之前记录的后端服务器上。server：重写 Cookie；开启重写 Cookie 的会话保持后，在客户端请求第一次转发到后端服务器后，ALB 在返回请求中发现您自定义的 Cookie 时，会对原来的 Cookie 进行重写。后续客户端请求携带改写后的 Cookie，ALB 会将请求转发到之前记录的后端服务器上。",
		//	      "enum": [
		//	        "insert",
		//	        "server"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"sticky_session_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Cookie
				"cookie": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "服务配置的会话保持 Cookie 名称。仅在开启会话保持功能并选择重写 Cookie 时有效。 具体规则如下：Cookie 名称长度为1~200个字符。名称只能包含 ASCII 英文字母和数字字符，不能包含半角逗号（,）、半角分号（;）或空格，也不能以美元符号（$）开头。当 tickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 server时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，该参数无效。",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(0, 200),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: CookieTimeout
				"cookie_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "会话保持 Cookie 超时时间。仅在开启会话保持功能并选择植入 Cookie 时有效。 单位：秒。具体规则如下：超时时间的取值范围：1～86400。 默认值为：1000。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionType 为 server 时，此参数无效。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(1000),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(0, 86400),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: StickySessionEnabled
				"sticky_session_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "是否开启会话保持功能。on：开启；off（默认值）：关闭。",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("off"),
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"on",
							"off",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: StickySessionType
				"sticky_session_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "对 Cookie 的处理方式。当 StickySessionConfig.StickySessionEnabled 值为 on 时，此字段参数必填。取值如下：insert：植入 Cookie；ALB 会记录客户端请求第一次转发到的后端服务器。ALB 在返回请求中植入 Cookie ，后续客户端请求携带此 Cookie，ALB 会将请求转发到之前记录的后端服务器上。server：重写 Cookie；开启重写 Cookie 的会话保持后，在客户端请求第一次转发到后端服务器后，ALB 在返回请求中发现您自定义的 Cookie 时，会对原来的 Cookie 进行重写。后续客户端请求携带改写后的 Cookie，ALB 会将请求转发到之前记录的后端服务器上。",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"insert",
							"server",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "会话保持功能的参数信息。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "标签信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "标签信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的最近操作时间。",
		//	  "type": "string"
		//	}
		"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的最近操作时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组所属 Vpc 的 ID。",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组所属 Vpc 的 ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "服务器组是后端服务器的逻辑集合。ALB 实例按照您配置的转发规则确定客户端请求将被转发到的服务器组。然后，ALB 实例根据您配置的负载均衡策略，将请求分发给服务器组内的后端服务器。后端服务器接收并处理请求。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ALB::ServerGroup").WithTerraformTypeName("volcenginecc_alb_server_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"cookie":                 "Cookie",
		"cookie_timeout":         "CookieTimeout",
		"create_time":            "CreateTime",
		"description":            "Description",
		"domain":                 "Domain",
		"enabled":                "Enabled",
		"health_check":           "HealthCheck",
		"healthy_threshold":      "HealthyThreshold",
		"http_code":              "HttpCode",
		"http_version":           "HttpVersion",
		"instance_id":            "InstanceId",
		"interval":               "Interval",
		"ip":                     "Ip",
		"ip_address_type":        "IPAddressType",
		"key":                    "Key",
		"listener_id":            "ListenerId",
		"listeners":              "Listeners",
		"method":                 "Method",
		"port":                   "Port",
		"project_name":           "ProjectName",
		"protocol":               "Protocol",
		"remote_enabled":         "RemoteEnabled",
		"scheduler":              "Scheduler",
		"server_count":           "ServerCount",
		"server_group_id":        "ServerGroupId",
		"server_group_name":      "ServerGroupName",
		"server_group_type":      "ServerGroupType",
		"server_id":              "ServerId",
		"servers":                "Servers",
		"status":                 "Status",
		"sticky_session_config":  "StickySessionConfig",
		"sticky_session_enabled": "StickySessionEnabled",
		"sticky_session_type":    "StickySessionType",
		"tags":                   "Tags",
		"timeout":                "Timeout",
		"type":                   "Type",
		"unhealthy_threshold":    "UnhealthyThreshold",
		"update_time":            "UpdateTime",
		"uri":                    "URI",
		"value":                  "Value",
		"vpc_id":                 "VpcId",
		"weight":                 "Weight",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/ServerGroupId",
		"/properties/ServerCount",
		"/properties/CreateTime",
		"/properties/UpdateTime",
		"/properties/Listeners",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/ProjectName",
		"/properties/Protocol",
		"/properties/ServerGroupType",
		"/properties/VpcId",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
