// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package redis

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_redis_instance", instanceResource)
}

// instanceResource returns the Terraform volcenginecc_redis_instance resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::Redis::Instance resource.
func instanceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllowListIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"allow_list_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
				setplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// AllowListIds is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: AutoRenew
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。",
		//	  "type": "boolean"
		//	}
		"auto_renew": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。",
			Optional:    true,
			Computed:    true,
			Default:     booldefault.StaticBool(false),
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BackupPointName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "为变更前创建的全量备份设置备份名称。",
		//	  "type": "string"
		//	}
		"backup_point_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "为变更前创建的全量备份设置备份名称。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// BackupPointName is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Capacity
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例的容量信息。",
		//	  "properties": {
		//	    "Total": {
		//	      "description": "当前实例的内存总容量。单位：MiB。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "Used": {
		//	      "description": "当前实例已用容量。单位：MiB。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"capacity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Total
				"total": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "当前实例的内存总容量。单位：MiB。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Used
				"used": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "当前实例已用容量。单位：MiB。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "实例的容量信息。",
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ChargeType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。",
		//	  "enum": [
		//	    "PostPaid",
		//	    "PrePaid"
		//	  ],
		//	  "type": "string"
		//	}
		"charge_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"PostPaid",
					"PrePaid",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConfigureNodes
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置节点所属的可用区列表。",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "properties": {
		//	      "AZ": {
		//	        "description": "每个节点所属的可用区。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"configure_nodes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AZ
					"az": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "每个节点所属的可用区。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "设置节点所属的可用区列表。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Required:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreateBackup
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否在变更前创建备份。",
		//	  "type": "boolean"
		//	}
		"create_backup": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否在变更前创建备份。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// CreateBackup is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CreateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例的创建时间。",
		//	  "type": "string"
		//	}
		"create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例的创建时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataLayout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。",
		//	  "type": "string"
		//	}
		"data_layout": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DeletionProtection
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "开启或关闭实例删除保护功能。",
		//	  "enum": [
		//	    "disabled",
		//	    "enabled"
		//	  ],
		//	  "type": "string"
		//	}
		"deletion_protection": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "开启或关闭实例删除保护功能。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"disabled",
					"enabled",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EngineVersion
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "数据库版本号。",
		//	  "enum": [
		//	    "5.0",
		//	    "6.0",
		//	    "7.0"
		//	  ],
		//	  "type": "string"
		//	}
		"engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "数据库版本号。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"5.0",
					"6.0",
					"7.0",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ExpiredTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例到期时间。",
		//	  "type": "string"
		//	}
		"expired_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例到期时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceClass
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。",
		//	  "enum": [
		//	    "PrimarySecondary",
		//	    "Standalone"
		//	  ],
		//	  "type": "string"
		//	}
		"instance_class": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例 ID。",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例 ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。",
		//	  "maxLength": 128,
		//	  "type": "string"
		//	}
		"instance_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(128),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceShards
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例中所有 Shard 分片的详情列表。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "实例中所有 Shard 分片的详情列表。",
		//	    "properties": {
		//	      "NodeNumber": {
		//	        "description": "分片中的节点数量",
		//	        "format": "int32",
		//	        "type": "integer"
		//	      },
		//	      "ServerNodes": {
		//	        "description": "分片中所有 Server 节点的详情列表。",
		//	        "items": {
		//	          "description": "分片中所有 Server 节点的详情列表。",
		//	          "properties": {
		//	            "CurrentRole": {
		//	              "description": "节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。",
		//	              "enum": [
		//	                "PrimaryNode",
		//	                "SecondaryNode"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "NodeId": {
		//	              "description": "节点 ID。",
		//	              "type": "string"
		//	            },
		//	            "Status": {
		//	              "description": "节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。",
		//	              "enum": [
		//	                "deploy",
		//	                "running",
		//	                "loading",
		//	                "error"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ZoneId": {
		//	              "description": "节点所在的可用区。",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "ShardId": {
		//	        "description": "分片 ID。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"instance_shards": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: NodeNumber
					"node_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "分片中的节点数量",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ServerNodes
					"server_nodes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CurrentRole
								"current_role": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: NodeId
								"node_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "节点 ID。",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Status
								"status": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ZoneId
								"zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "节点所在的可用区。",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "分片中所有 Server 节点的详情列表。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ShardId
					"shard_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "分片 ID。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "实例中所有 Shard 分片的详情列表。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaintenanceTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。",
		//	  "type": "string"
		//	}
		"maintenance_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxConnections
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。",
		//	  "format": "int32",
		//	  "type": "integer"
		//	}
		"max_connections": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MultiAZ
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置实例的可用区部署方案。",
		//	  "enum": [
		//	    "disabled",
		//	    "enabled"
		//	  ],
		//	  "type": "string"
		//	}
		"multi_az": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "设置实例的可用区部署方案。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"disabled",
					"enabled",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: NoAuthMode
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "close",
		//	  "description": "为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。",
		//	  "enum": [
		//	    "open",
		//	    "close"
		//	  ],
		//	  "type": "string"
		//	}
		"no_auth_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("close"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"open",
					"close",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// NoAuthMode is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: NodeIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": " Proxy 和 Server 节点 ID 列表。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"node_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: " Proxy 和 Server 节点 ID 列表。",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NodeNumber
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。",
		//	  "format": "int32",
		//	  "maximum": 6,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"node_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。",
			Required:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1, 6),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ParameterGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。",
		//	  "type": "string"
		//	}
		"parameter_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// ParameterGroupId is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Password
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置默认数据库 default 账号的密码。",
		//	  "type": "string"
		//	}
		"password": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "设置默认数据库 default 账号的密码。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// Password is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Port
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。",
		//	  "format": "int32",
		//	  "maximum": 65535,
		//	  "minimum": 1024,
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1024, 65535),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Port is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: PrivateAddress
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例私网连接地址的域名。",
		//	  "type": "string"
		//	}
		"private_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例私网连接地址的域名。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "default",
		//	  "description": "实例所属的项目。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例所属的项目。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("default"),
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PurchaseMonths
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。",
		//	  "format": "int32",
		//	  "maximum": 36,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"purchase_months": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1, 36),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// PurchaseMonths is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ReserveAdditionalBandwidth
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置是否保留额外带宽",
		//	  "type": "boolean"
		//	}
		"reserve_additional_bandwidth": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "设置是否保留额外带宽",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// ReserveAdditionalBandwidth is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ServiceType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例的服务类型",
		//	  "enum": [
		//	    "Basic",
		//	    "Enterprise"
		//	  ],
		//	  "type": "string"
		//	}
		"service_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例的服务类型",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ShardCapacity
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例中每个分片的内存容量。单位：MiB。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"shard_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "实例中每个分片的内存容量。单位：MiB。",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: ShardNumber
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。",
		//	  "format": "int32",
		//	  "maximum": 256,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"shard_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1, 256),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ShardedCluster
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否启用分片集群。取值范围如下：0：不启用。1：启用。",
		//	  "enum": [
		//	    0,
		//	    1
		//	  ],
		//	  "format": "int32",
		//	  "type": "integer"
		//	}
		"sharded_cluster": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "是否启用分片集群。取值范围如下：0：不启用。1：启用。",
			Required:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.OneOf(
					0,
					1,
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SubnetId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。",
		//	  "type": "string"
		//	}
		"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置实例的标签列表。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "标签键值对。",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "设置实例的标签列表。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VIP
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例私网连接地址所对应的 IPv4 地址。",
		//	  "type": "string"
		//	}
		"vip": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例私网连接地址所对应的 IPv4 地址。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VIPv6
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。",
		//	  "type": "string"
		//	}
		"vi_pv_6": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VisitAddrs
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "连接地址信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "AddrType": {
		//	        "description": "连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。",
		//	        "type": "string"
		//	      },
		//	      "Address": {
		//	        "description": "IP 地址或者域名。",
		//	        "type": "string"
		//	      },
		//	      "EipId": {
		//	        "description": "实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。",
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "description": "端口号。",
		//	        "type": "string"
		//	      },
		//	      "VIP": {
		//	        "description": "连接地址所对应的 IPv4 地址。",
		//	        "type": "string"
		//	      },
		//	      "VIPv6": {
		//	        "description": "连接地址所对应的 IPv6 地址。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"visit_addrs": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AddrType
					"addr_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Address
					"address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "IP 地址或者域名。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: EipId
					"eip_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "端口号。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: VIP
					"vip": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "连接地址所对应的 IPv4 地址。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: VIPv6
					"vi_pv_6": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "连接地址所对应的 IPv6 地址。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "连接地址信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcAuthMode
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。",
		//	  "enum": [
		//	    "open",
		//	    "close"
		//	  ],
		//	  "type": "string"
		//	}
		"vpc_auth_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ZoneIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例所在的可用区列表。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"zone_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "实例所在的可用区列表。",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "缓存数据库 Redis 版的基本单位是实例。实例是独立的、虚拟化的数据库运行环境，是多个数据节点与代理节点的集合，数据节点上运行 Redis 引擎。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::Redis::Instance").WithTerraformTypeName("volcenginecc_redis_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"addr_type":                    "AddrType",
		"address":                      "Address",
		"allow_list_ids":               "AllowListIds",
		"auto_renew":                   "AutoRenew",
		"az":                           "AZ",
		"backup_point_name":            "BackupPointName",
		"capacity":                     "Capacity",
		"charge_type":                  "ChargeType",
		"configure_nodes":              "ConfigureNodes",
		"create_backup":                "CreateBackup",
		"create_time":                  "CreateTime",
		"current_role":                 "CurrentRole",
		"data_layout":                  "DataLayout",
		"deletion_protection":          "DeletionProtection",
		"eip_id":                       "EipId",
		"engine_version":               "EngineVersion",
		"expired_time":                 "ExpiredTime",
		"instance_class":               "InstanceClass",
		"instance_id":                  "InstanceId",
		"instance_name":                "InstanceName",
		"instance_shards":              "InstanceShards",
		"key":                          "Key",
		"maintenance_time":             "MaintenanceTime",
		"max_connections":              "MaxConnections",
		"multi_az":                     "MultiAZ",
		"no_auth_mode":                 "NoAuthMode",
		"node_id":                      "NodeId",
		"node_ids":                     "NodeIds",
		"node_number":                  "NodeNumber",
		"parameter_group_id":           "ParameterGroupId",
		"password":                     "Password",
		"port":                         "Port",
		"private_address":              "PrivateAddress",
		"project_name":                 "ProjectName",
		"purchase_months":              "PurchaseMonths",
		"reserve_additional_bandwidth": "ReserveAdditionalBandwidth",
		"server_nodes":                 "ServerNodes",
		"service_type":                 "ServiceType",
		"shard_capacity":               "ShardCapacity",
		"shard_id":                     "ShardId",
		"shard_number":                 "ShardNumber",
		"sharded_cluster":              "ShardedCluster",
		"status":                       "Status",
		"subnet_id":                    "SubnetId",
		"tags":                         "Tags",
		"total":                        "Total",
		"used":                         "Used",
		"value":                        "Value",
		"vi_pv_6":                      "VIPv6",
		"vip":                          "VIP",
		"visit_addrs":                  "VisitAddrs",
		"vpc_auth_mode":                "VpcAuthMode",
		"vpc_id":                       "VpcId",
		"zone_id":                      "ZoneId",
		"zone_ids":                     "ZoneIds",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/AllowListIds",
		"/properties/BackupPointName",
		"/properties/CreateBackup",
		"/properties/NoAuthMode",
		"/properties/ParameterGroupId",
		"/properties/Password",
		"/properties/Port",
		"/properties/PurchaseMonths",
		"/properties/ReserveAdditionalBandwidth",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/Capacity",
		"/properties/CreateTime",
		"/properties/DataLayout",
		"/properties/ExpiredTime",
		"/properties/InstanceClass",
		"/properties/InstanceId",
		"/properties/PrivateAddress",
		"/properties/ServiceType",
		"/properties/Status",
		"/properties/VIP",
		"/properties/VIPv6",
		"/properties/ZoneIds",
		"/properties/MaintenanceTime",
		"/properties/MaxConnections",
		"/properties/VisitAddrs",
		"/properties/VpcAuthMode",
		"/properties/InstanceShards",
		"/properties/NodeIds",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/AllowListIds",
		"/properties/EngineVersion",
		"/properties/Port",
		"/properties/ProjectName",
		"/properties/SubnetId",
		"/properties/VpcId",
		"/properties/ParameterGroupId",
		"/properties/NoAuthMode",
		"/properties/ShardedCluster",
		"/properties/ConfigureNodes",
		"/properties/NodeNumber",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
