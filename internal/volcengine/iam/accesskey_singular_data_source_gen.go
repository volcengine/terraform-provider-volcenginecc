// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_iam_accesskey", accesskeyDataSource)
}

// accesskeyDataSource returns the Terraform volcenginecc_iam_accesskey data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::IAM::Accesskey resource.
func accesskeyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessKeyId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥ID（Access Key Id）。",
		//	  "type": "string"
		//	}
		"access_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥ID（Access Key Id）。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreateDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥创建时间",
		//	  "type": "string"
		//	}
		"create_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥创建时间",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Region
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "API密钥最后访问的地域。",
		//	  "type": "string"
		//	}
		"region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "API密钥最后访问的地域。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RequestTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "API密钥的最后使用的时间。",
		//	  "type": "string"
		//	}
		"request_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "API密钥的最后使用的时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecretAccessKey
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "私有密钥（Secret Access Key）。",
		//	  "type": "string"
		//	}
		"secret_access_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "私有密钥（Secret Access Key）。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Service
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "API密钥最后访问的服务的英文简称。",
		//	  "type": "string"
		//	}
		"service": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "API密钥最后访问的服务的英文简称。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥状态 (active/inactive)",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥状态 (active/inactive)",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdateDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥更新时间",
		//	  "type": "string"
		//	}
		"update_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥更新时间",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户名",
		//	  "type": "string"
		//	}
		"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户名",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::IAM::Accesskey",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::IAM::Accesskey").WithTerraformTypeName("volcenginecc_iam_accesskey")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_key_id":     "AccessKeyId",
		"create_date":       "CreateDate",
		"region":            "Region",
		"request_time":      "RequestTime",
		"secret_access_key": "SecretAccessKey",
		"service":           "Service",
		"status":            "Status",
		"update_date":       "UpdateDate",
		"user_name":         "UserName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
