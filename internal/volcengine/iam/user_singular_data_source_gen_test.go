// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iam_test

import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/acctest"
)

<<<<<<< HEAD
<<<<<<< HEAD
func TestAccVolcengineIAMUserDataSource_basic(t *testing.T) {
	td := acctest.NewTestData(t, "Volcengine::IAM::User", "volcenginecc_iam_user", "test")
=======
func TestAccVolcengineIamUserDataSource_basic(t *testing.T) {
	td := acctest.NewTestData(t, "Volcengine::Iam::User", "volcenginecc_iam_user", "test")
>>>>>>> b862fcd (feat: volcenginecc_vpc_vpc、volcenginecc_iam_user、volcengine_iam_role、volcenginecc_tos_bucket)
=======
func TestAccVolcengineIAMUserDataSource_basic(t *testing.T) {
	td := acctest.NewTestData(t, "Volcengine::IAM::User", "volcenginecc_iam_user", "test")
>>>>>>> 582f820 (feat: volcenginecc_vpc_vpc、volcenginecc_iam_user、volcengine_iam_role、volcenginecc_tos_bucket)

	td.DataSourceTest(t, []resource.TestStep{
		{
			Config:      td.EmptyDataSourceConfig(),
			ExpectError: regexp.MustCompile("Missing required argument"),
		},
	})
}

<<<<<<< HEAD
<<<<<<< HEAD
func TestAccVolcengineIAMUserDataSource_NonExistent(t *testing.T) {
	td := acctest.NewTestData(t, "Volcengine::IAM::User", "volcenginecc_iam_user", "test")
=======
func TestAccVolcengineIamUserDataSource_NonExistent(t *testing.T) {
	td := acctest.NewTestData(t, "Volcengine::Iam::User", "volcenginecc_iam_user", "test")
>>>>>>> b862fcd (feat: volcenginecc_vpc_vpc、volcenginecc_iam_user、volcengine_iam_role、volcenginecc_tos_bucket)
=======
func TestAccVolcengineIAMUserDataSource_NonExistent(t *testing.T) {
	td := acctest.NewTestData(t, "Volcengine::IAM::User", "volcenginecc_iam_user", "test")
>>>>>>> 582f820 (feat: volcenginecc_vpc_vpc、volcenginecc_iam_user、volcengine_iam_role、volcenginecc_tos_bucket)

	td.DataSourceTest(t, []resource.TestStep{
		{
			Config:      td.DataSourceWithNonExistentIDConfig(),
			ExpectError: regexp.MustCompile("Not Found"),
		},
	})
}
