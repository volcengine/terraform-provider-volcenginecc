// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddResourceFactory("volcenginecc_iam_accesskey", accesskeyResource)
}

// accesskeyResource returns the Terraform volcenginecc_iam_accesskey resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::IAM::Accesskey resource.
func accesskeyResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessKeyId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥ID（Access Key Id）。",
		//	  "type": "string"
		//	}
		"access_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥ID（Access Key Id）。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreateDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥创建时间",
		//	  "type": "string"
		//	}
		"create_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥创建时间",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Region
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "API密钥最后访问的地域。",
		//	  "type": "string"
		//	}
		"region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "API密钥最后访问的地域。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RequestTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "API密钥的最后使用的时间。",
		//	  "type": "string"
		//	}
		"request_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "API密钥的最后使用的时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SecretAccessKey
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "私有密钥（Secret Access Key）。",
		//	  "type": "string"
		//	}
		"secret_access_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "私有密钥（Secret Access Key）。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Service
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "API密钥最后访问的服务的英文简称。",
		//	  "type": "string"
		//	}
		"service": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "API密钥最后访问的服务的英文简称。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥状态 (active/inactive)",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥状态 (active/inactive)",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdateDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥更新时间",
		//	  "type": "string"
		//	}
		"update_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥更新时间",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UserName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户名",
		//	  "type": "string"
		//	}
		"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户名",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::IAM::Accesskey").WithTerraformTypeName("volcenginecc_iam_accesskey")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_key_id":     "AccessKeyId",
		"create_date":       "CreateDate",
		"region":            "Region",
		"request_time":      "RequestTime",
		"secret_access_key": "SecretAccessKey",
		"service":           "Service",
		"status":            "Status",
		"update_date":       "UpdateDate",
		"user_name":         "UserName",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/CreateDate",
		"/properties/Region",
		"/properties/RequestTime",
		"/properties/Service",
		"/properties/UpdateDate",
		"/properties/SecretAccessKey",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/UserName",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
