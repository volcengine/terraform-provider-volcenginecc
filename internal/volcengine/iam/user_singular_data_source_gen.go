// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_iam_user", userDataSource)
}

// userDataSource returns the Terraform volcenginecc_iam_user data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::Iam::User resource.
func userDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户归属的主账号",
		//	  "type": "number"
		//	}
		"account_id": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "子用户归属的主账号",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreateDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的创建时间",
		//	  "type": "string"
		//	}
		"create_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的创建时间",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的描述信息",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的描述信息",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的展示名称",
		//	  "maxLength": 128,
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的展示名称",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Email
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的电子邮件地址",
		//	  "type": "string"
		//	}
		"email": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的电子邮件地址",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Groups
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户归属的用户组",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "子用户归属的用户组",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoginProfile
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户的登录配置",
		//	  "properties": {
		//	    "LastResetPasswordTime": {
		//	      "description": "上次重置密码的时间",
		//	      "type": "number"
		//	    },
		//	    "LoginAllowed": {
		//	      "description": "是否允许登录",
		//	      "type": "boolean"
		//	    },
		//	    "Password": {
		//	      "description": "登录密码",
		//	      "type": "string"
		//	    },
		//	    "PasswordResetRequired": {
		//	      "description": "下次登录是否需要重设密码",
		//	      "type": "boolean"
		//	    },
		//	    "SafeAuthExemptDuration": {
		//	      "description": "登录保护豁免时长",
		//	      "type": "number"
		//	    },
		//	    "SafeAuthExemptRequired": {
		//	      "description": "是否开启登录保护豁免",
		//	      "type": "number"
		//	    },
		//	    "SafeAuthExemptUnit": {
		//	      "description": "登录保护豁免的时间单位",
		//	      "type": "number"
		//	    },
		//	    "SafeAuthFlag": {
		//	      "description": "是否开启登录保护",
		//	      "type": "boolean"
		//	    },
		//	    "SafeAuthType": {
		//	      "description": "登录保护类型",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"login_profile": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LastResetPasswordTime
				"last_reset_password_time": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "上次重置密码的时间",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LoginAllowed
				"login_allowed": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "是否允许登录",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Password
				"password": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "登录密码",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PasswordResetRequired
				"password_reset_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "下次登录是否需要重设密码",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SafeAuthExemptDuration
				"safe_auth_exempt_duration": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "登录保护豁免时长",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SafeAuthExemptRequired
				"safe_auth_exempt_required": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "是否开启登录保护豁免",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SafeAuthExemptUnit
				"safe_auth_exempt_unit": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "登录保护豁免的时间单位",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SafeAuthFlag
				"safe_auth_flag": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "是否开启登录保护",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SafeAuthType
				"safe_auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "登录保护类型",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "子用户的登录配置",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MobilePhone
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的手机号",
		//	  "maxLength": 20,
		//	  "type": "string"
		//	}
		"mobile_phone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的手机号",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Policies
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的权限策略",
		//	  "items": {
		//	    "description": "权限策略",
		//	    "properties": {
		//	      "PolicyName": {
		//	        "description": "权限策略名称",
		//	        "type": "string"
		//	      },
		//	      "PolicyType": {
		//	        "description": "权限策略类型",
		//	        "enum": [
		//	          "System",
		//	          "Custom"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "PolicyName",
		//	      "PolicyType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: PolicyName
					"policy_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "权限策略名称",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PolicyType
					"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "权限策略类型",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "子用户对应的权限策略",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的资源标签",
		//	  "items": {
		//	    "description": "资源标签",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "子用户对应的资源标签",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Trn
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的Trn表达式",
		//	  "type": "string"
		//	}
		"trn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的Trn表达式",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdateDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户对应的更新时间",
		//	  "type": "string"
		//	}
		"update_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户对应的更新时间",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子用户名称",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子用户名称",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::Iam::User",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::Iam::User").WithTerraformTypeName("volcenginecc_iam_user")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":                "AccountId",
		"create_date":               "CreateDate",
		"description":               "Description",
		"display_name":              "DisplayName",
		"email":                     "Email",
		"groups":                    "Groups",
		"key":                       "Key",
		"last_reset_password_time":  "LastResetPasswordTime",
		"login_allowed":             "LoginAllowed",
		"login_profile":             "LoginProfile",
		"mobile_phone":              "MobilePhone",
		"password":                  "Password",
		"password_reset_required":   "PasswordResetRequired",
		"policies":                  "Policies",
		"policy_name":               "PolicyName",
		"policy_type":               "PolicyType",
		"safe_auth_exempt_duration": "SafeAuthExemptDuration",
		"safe_auth_exempt_required": "SafeAuthExemptRequired",
		"safe_auth_exempt_unit":     "SafeAuthExemptUnit",
		"safe_auth_flag":            "SafeAuthFlag",
		"safe_auth_type":            "SafeAuthType",
		"tags":                      "Tags",
		"trn":                       "Trn",
		"update_date":               "UpdateDate",
		"user_name":                 "UserName",
		"value":                     "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
