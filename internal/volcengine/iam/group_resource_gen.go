// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_iam_group", groupResource)
}

// groupResource returns the Terraform volcenginecc_iam_group resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::IAM::Group resource.
func groupResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountID
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组所属主账号的ID。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"account_id": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "用户组所属主账号的ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AttachedPolicys
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组绑定的策略信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "AttachTime": {
		//	        "description": "策略绑定时间。",
		//	        "type": "string"
		//	      },
		//	      "Description": {
		//	        "description": "策略描述。",
		//	        "type": "string"
		//	      },
		//	      "PolicyName": {
		//	        "description": "策略名。",
		//	        "type": "string"
		//	      },
		//	      "PolicyScope": {
		//	        "description": "策略授权的作用范围，特指项目范围。",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "properties": {
		//	            "AttachTime": {
		//	              "description": "项目授权时间。",
		//	              "type": "string"
		//	            },
		//	            "PolicyScopeType": {
		//	              "description": "授权类型。Global代表全局授权（不限制项目），Project代表按项目授权。",
		//	              "enum": [
		//	                "Global",
		//	                "Project"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ProjectDisplayName": {
		//	              "description": "按项目授权时的项目显示名。",
		//	              "type": "string"
		//	            },
		//	            "ProjectName": {
		//	              "description": "按项目授权时的项目名。",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "PolicyTrn": {
		//	        "description": "策略TRN。",
		//	        "type": "string"
		//	      },
		//	      "PolicyType": {
		//	        "default": "All",
		//	        "description": "策略类型。System代表系统预设策略，Custom代表自定义策略。",
		//	        "enum": [
		//	          "Custom",
		//	          "System",
		//	          "All"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "PolicyName",
		//	      "PolicyType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"attached_policys": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AttachTime
					// Property: Description
					// Property: PolicyName
					"policy_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "策略名。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: PolicyScope
					"policy_scope": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AttachTime
								"attach_time": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "项目授权时间。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: PolicyScopeType
								"policy_scope_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "授权类型。Global代表全局授权（不限制项目），Project代表按项目授权。",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"Global",
											"Project",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ProjectDisplayName
								"project_display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "按项目授权时的项目显示名。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ProjectName
								"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "按项目授权时的项目名。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "策略授权的作用范围，特指项目范围。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
							setplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: PolicyTrn
					// Property: PolicyType
					"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "策略类型。System代表系统预设策略，Custom代表自定义策略。",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("All"),
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"Custom",
								"System",
								"All",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "用户组绑定的策略信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组的创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户组的创建时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组描述信息。长度不超过128。",
		//	  "maxLength": 128,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户组描述信息。长度不超过128。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(128),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组显示名称。长度不超过64。",
		//	  "maxLength": 64,
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户组显示名称。长度不超过64。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(64),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组的更新时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户组的更新时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UserGroupID
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组ID。",
		//	  "type": "integer"
		//	}
		"user_group_id": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "用户组ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UserGroupName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组名称。长度1~64，支持英文、数字和.-_符号。",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"user_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "用户组名称。长度1~64，支持英文、数字和.-_符号。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 64),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Users
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "用户组内绑定的用户信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Description": {
		//	        "description": "用户描述。",
		//	        "type": "string"
		//	      },
		//	      "DisplayName": {
		//	        "description": "用户显示名。",
		//	        "type": "string"
		//	      },
		//	      "JoinTime": {
		//	        "description": "用户加入用户组的时间。",
		//	        "type": "string"
		//	      },
		//	      "UserID": {
		//	        "description": "用户ID。",
		//	        "type": "integer"
		//	      },
		//	      "UserName": {
		//	        "description": "用户名。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "UserName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"users": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Description
					// Property: DisplayName
					// Property: JoinTime
					// Property: UserID
					// Property: UserName
					"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户名。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "用户组内绑定的用户信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "用户组是用户的集合。当用户组被关联上策略后，同一用户组里的所有用户会拥有对应的策略权限，同一个用户可存在于多个用户组中，可同时拥有多个用户组的权限。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::IAM::Group").WithTerraformTypeName("volcenginecc_iam_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":           "AccountID",
		"attach_time":          "AttachTime",
		"attached_policys":     "AttachedPolicys",
		"created_time":         "CreatedTime",
		"description":          "Description",
		"display_name":         "DisplayName",
		"join_time":            "JoinTime",
		"policy_name":          "PolicyName",
		"policy_scope":         "PolicyScope",
		"policy_scope_type":    "PolicyScopeType",
		"policy_trn":           "PolicyTrn",
		"policy_type":          "PolicyType",
		"project_display_name": "ProjectDisplayName",
		"project_name":         "ProjectName",
		"updated_time":         "UpdatedTime",
		"user_group_id":        "UserGroupID",
		"user_group_name":      "UserGroupName",
		"user_id":              "UserID",
		"user_name":            "UserName",
		"users":                "Users",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/AccountID",
		"/properties/UserGroupID",
		"/properties/CreatedTime",
		"/properties/UpdatedTime",
		"/properties/Users/*/UserID",
		"/properties/Users/*/DisplayName",
		"/properties/Users/*/Description",
		"/properties/Users/*/JoinTime",
		"/properties/AttachedPolicys/*/PolicyTrn",
		"/properties/AttachedPolicys/*/AttachTime",
		"/properties/AttachedPolicys/*/Description",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/UserGroupName",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
