// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cr

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_cr_repository", repositoryDataSource)
}

// repositoryDataSource returns the Terraform volcenginecc_cr_repository data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::CR::Repository resource.
func repositoryDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessLevel
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "访问等级，取值如下：\nPrivate：私有类型 OCI 制品仓库，只能被有权限的用户访问。\nPublic：公有类型 OCI 制品仓库，可以被所有用户访问。\n单次可填写一个或多个访问等级。",
		//	  "type": "string"
		//	}
		"access_level": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "访问等级，取值如下：\nPrivate：私有类型 OCI 制品仓库，只能被有权限的用户访问。\nPublic：公有类型 OCI 制品仓库，可以被所有用户访问。\n单次可填写一个或多个访问等级。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "创建 OCI 制品仓库的时间。RFC3339 格式的 UTC+0 时间。",
		//	  "type": "string"
		//	}
		"create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "创建 OCI 制品仓库的时间。RFC3339 格式的 UTC+0 时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像仓库描述，描述长度为 0~300 个 UTF-8 字符。",
		//	  "maxLength": 300,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像仓库描述，描述长度为 0~300 个 UTF-8 字符。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "OCI 制品仓库名称。同一个命名空间下，名称必须唯一。支持小写英文、数字、分隔符（分隔符可输入一个.或/、一个或多个-、一个或两个_，且分隔符不能出现在首位或末位，不能连续出现），长度限制为 1～128 个字符。",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "OCI 制品仓库名称。同一个命名空间下，名称必须唯一。支持小写英文、数字、分隔符（分隔符可输入一个.或/、一个或多个-、一个或两个_，且分隔符不能出现在首位或末位，不能连续出现），长度限制为 1～128 个字符。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Namespace
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "目标命名空间名称。在 镜像仓库控制台 目标实例的 命名空间 页面，获取命名空间名称。",
		//	  "maxLength": 90,
		//	  "minLength": 2,
		//	  "type": "string"
		//	}
		"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "目标命名空间名称。在 镜像仓库控制台 目标实例的 命名空间 页面，获取命名空间名称。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Registry
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "指定命名空间所属的镜像仓库实例名称。在 镜像仓库控制台 的 实例列表 页面，获取实例名称。",
		//	  "maxLength": 30,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"registry": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "指定命名空间所属的镜像仓库实例名称。在 镜像仓库控制台 的 实例列表 页面，获取实例名称。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "最近一次更新 OCI 制品仓库的时间。RFC3339 格式的 UTC+0 时间。",
		//	  "type": "string"
		//	}
		"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "最近一次更新 OCI 制品仓库的时间。RFC3339 格式的 UTC+0 时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::CR::Repository",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::CR::Repository").WithTerraformTypeName("volcenginecc_cr_repository")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_level": "AccessLevel",
		"create_time":  "CreateTime",
		"description":  "Description",
		"name":         "Name",
		"namespace":    "Namespace",
		"registry":     "Registry",
		"update_time":  "UpdateTime",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
