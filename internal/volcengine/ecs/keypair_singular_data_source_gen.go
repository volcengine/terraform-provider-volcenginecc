// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_ecs_keypair", keypairDataSource)
}

// keypairDataSource returns the Terraform volcenginecc_ecs_keypair data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::ECS::Keypair resource.
func keypairDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对创建时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FingerPrint
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。",
		//	  "type": "string"
		//	}
		"finger_print": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "操作的实例ID。",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"instance_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "操作的实例ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KeyPairId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对唯一ID。",
		//	  "type": "string"
		//	}
		"key_pair_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对唯一ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KeyPairName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。",
		//	  "type": "string"
		//	}
		"key_pair_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrivateKey
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对私钥信息。",
		//	  "type": "string"
		//	}
		"private_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对私钥信息。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PublicKey
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对的公钥信息。",
		//	  "type": "string"
		//	}
		"public_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对的公钥信息。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对的标签。",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "密钥对的标签。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "密钥对更新时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "密钥对更新时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::ECS::Keypair",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ECS::Keypair").WithTerraformTypeName("volcenginecc_ecs_keypair")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"created_time":  "CreatedTime",
		"description":   "Description",
		"finger_print":  "FingerPrint",
		"instance_ids":  "InstanceIds",
		"key":           "Key",
		"key_pair_id":   "KeyPairId",
		"key_pair_name": "KeyPairName",
		"private_key":   "PrivateKey",
		"project_name":  "ProjectName",
		"public_key":    "PublicKey",
		"tags":          "Tags",
		"updated_time":  "UpdatedTime",
		"value":         "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
