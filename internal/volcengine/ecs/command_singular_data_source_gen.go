// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_ecs_command", commandDataSource)
}

// commandDataSource returns the Terraform volcenginecc_ecs_command data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::ECS::Command resource.
func commandDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CommandContent
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。",
		//	  "type": "string"
		//	}
		"command_content": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CommandId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "自定义命令ID。",
		//	  "type": "string"
		//	}
		"command_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "自定义命令ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ContentEncoding
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "Base64",
		//	  "description": "命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。",
		//	  "enum": [
		//	    "Base64",
		//	    "PlainText"
		//	  ],
		//	  "type": "string"
		//	}
		"content_encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "创建时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。",
		//	  "maxLength": 256,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnableParameter
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。",
		//	  "type": "boolean"
		//	}
		"enable_parameter": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InvocationTimes
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "命令被调用次数。",
		//	  "type": "integer"
		//	}
		"invocation_times": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "命令被调用次数。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "命令名称。字符长度1~32。不限制特殊字符。",
		//	  "maxLength": 32,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "命令名称。字符长度1~32。不限制特殊字符。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ParameterDefinitions
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "自定义参数定义信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "DecimalPrecision": {
		//	        "default": 0,
		//	        "description": "自定义参数值（数字）允许的小数点后位数。",
		//	        "maximum": 10,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "DefaultValue": {
		//	        "description": "自定义参数默认值。",
		//	        "type": "string"
		//	      },
		//	      "MaxLength": {
		//	        "description": "自定义参数值（字符串）的最大长度。",
		//	        "maximum": 1000,
		//	        "type": "integer"
		//	      },
		//	      "MaxValue": {
		//	        "description": "自定义参数值（数字）的最大值。",
		//	        "type": "string"
		//	      },
		//	      "MinLength": {
		//	        "description": "自定义参数值（字符串）的最小长度。",
		//	        "maximum": 1000,
		//	        "type": "integer"
		//	      },
		//	      "MinValue": {
		//	        "description": "自定义参数值（数字）的最小值。",
		//	        "type": "string"
		//	      },
		//	      "Name": {
		//	        "description": "自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。",
		//	        "maxLength": 64,
		//	        "type": "string"
		//	      },
		//	      "Required": {
		//	        "description": "是否必填。",
		//	        "type": "boolean"
		//	      },
		//	      "Type": {
		//	        "description": "自定义参数类型。",
		//	        "enum": [
		//	          "String",
		//	          "Digit"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"parameter_definitions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DecimalPrecision
					"decimal_precision": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "自定义参数值（数字）允许的小数点后位数。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DefaultValue
					"default_value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "自定义参数默认值。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MaxLength
					"max_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "自定义参数值（字符串）的最大长度。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MaxValue
					"max_value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "自定义参数值（数字）的最大值。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MinLength
					"min_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "自定义参数值（字符串）的最小长度。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MinValue
					"min_value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "自定义参数值（数字）的最小值。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Required
					"required": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "是否必填。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "自定义参数类型。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "自定义参数定义信息。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "资源所属项目，一个资源只能归属于一个项目。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "资源所属项目，一个资源只能归属于一个项目。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Provider
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "命令的提供方。",
		//	  "type": "string"
		//	}
		"provider_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "命令的提供方。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "标签键值对。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "标签键值对。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Timeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": 60,
		//	  "description": "创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。",
		//	  "maximum": 86400,
		//	  "minimum": 30,
		//	  "type": "integer"
		//	}
		"timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。",
		//	  "enum": [
		//	    "Shell",
		//	    "Python",
		//	    "Bat",
		//	    "PowerShell"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "更新时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "更新时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Username
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "执行命令时的用户名。",
		//	  "type": "string"
		//	}
		"username": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "执行命令时的用户名。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WorkingDir
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "创建的命令在ECS实例中运行的目录。",
		//	  "type": "string"
		//	}
		"working_dir": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "创建的命令在ECS实例中运行的目录。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::ECS::Command",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ECS::Command").WithTerraformTypeName("volcenginecc_ecs_command")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"command_content":       "CommandContent",
		"command_id":            "CommandId",
		"content_encoding":      "ContentEncoding",
		"created_time":          "CreatedTime",
		"decimal_precision":     "DecimalPrecision",
		"default_value":         "DefaultValue",
		"description":           "Description",
		"enable_parameter":      "EnableParameter",
		"invocation_times":      "InvocationTimes",
		"key":                   "Key",
		"max_length":            "MaxLength",
		"max_value":             "MaxValue",
		"min_length":            "MinLength",
		"min_value":             "MinValue",
		"name":                  "Name",
		"parameter_definitions": "ParameterDefinitions",
		"project_name":          "ProjectName",
		"provider_name":         "Provider",
		"required":              "Required",
		"tags":                  "Tags",
		"timeout":               "Timeout",
		"type":                  "Type",
		"updated_time":          "UpdatedTime",
		"username":              "Username",
		"value":                 "Value",
		"working_dir":           "WorkingDir",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
