// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_ecs_image", imageResource)
}

// imageResource returns the Terraform volcenginecc_ecs_image resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::ECS::Image resource.
func imageResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Architecture
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像的架构类型",
		//	  "enum": [
		//	    "amd64",
		//	    "arm64"
		//	  ],
		//	  "type": "string"
		//	}
		"architecture": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像的架构类型",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BootMode
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像的启动模式",
		//	  "enum": [
		//	    "BIOS",
		//	    "UEFI"
		//	  ],
		//	  "type": "string"
		//	}
		"boot_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像的启动模式",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"BIOS",
					"UEFI",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像创建时间",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像创建时间",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像描述",
		//	  "maxLength": 255,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像描述",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DetectionResults
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "DetectionStatus": {
		//	      "description": "检测状态",
		//	      "enum": [
		//	        "Finished",
		//	        "Processing"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Items": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "properties": {
		//	          "Name": {
		//	            "description": "检测项名称",
		//	            "type": "string"
		//	          },
		//	          "Result": {
		//	            "description": "该检测项对应结果",
		//	            "type": "string"
		//	          },
		//	          "RiskCode": {
		//	            "description": "风险描述码",
		//	            "type": "string"
		//	          },
		//	          "RiskLevel": {
		//	            "description": "风险等级",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"detection_results": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DetectionStatus
				"detection_status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "检测状态",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"Finished",
							"Processing",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Items
				"items": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "检测项名称",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Result
							"result": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "该检测项对应结果",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: RiskCode
							"risk_code": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "风险描述码",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: RiskLevel
							"risk_level": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "风险等级",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ImageId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例ID",
		//	  "type": "string"
		//	}
		"image_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例ID",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ImageName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像名称",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"image_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像名称",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: ImageOwnerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像所属的账号ID",
		//	  "type": "string"
		//	}
		"image_owner_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像所属的账号ID",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "实例ID",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "实例ID",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IsInstallRunCommandAgent
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像中是否安装了云助手Agent",
		//	  "type": "boolean"
		//	}
		"is_install_run_command_agent": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "镜像中是否安装了云助手Agent",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IsLTS
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "公共镜像是否长期维护",
		//	  "type": "boolean"
		//	}
		"is_lts": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "公共镜像是否长期维护",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IsSupportCloudInit
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像是否支持Cloud-init",
		//	  "type": "boolean"
		//	}
		"is_support_cloud_init": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "镜像是否支持Cloud-init",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Kernel
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像的内核版本",
		//	  "type": "string"
		//	}
		"kernel": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像的内核版本",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LicenseType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像许可证类型",
		//	  "enum": [
		//	    "VolcanoEngine",
		//	    "BYOL",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"license_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像许可证类型",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"VolcanoEngine",
					"BYOL",
					"",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OsName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像操作系统的名称",
		//	  "type": "string"
		//	}
		"os_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像操作系统的名称",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OsType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "操作系统类型",
		//	  "type": "string"
		//	}
		"os_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "操作系统类型",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Platform
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像操作系统的发行版本",
		//	  "enum": [
		//	    "CentOS",
		//	    "Debian",
		//	    "veLinux",
		//	    "Windows Server",
		//	    "Fedora",
		//	    "OpenSUSE",
		//	    "Ubuntu"
		//	  ],
		//	  "type": "string"
		//	}
		"platform": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像操作系统的发行版本",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"CentOS",
					"Debian",
					"veLinux",
					"Windows Server",
					"Fedora",
					"OpenSUSE",
					"Ubuntu",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PlatformVersion
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像的发行版本",
		//	  "type": "string"
		//	}
		"platform_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像的发行版本",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "资源所属项目",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "资源所属项目",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SharePermission
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像共享的账户",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"share_permission": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "镜像共享的账户",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ShareStatus
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像共享状态",
		//	  "enum": [
		//	    "HasShared",
		//	    ""
		//	  ],
		//	  "type": "string"
		//	}
		"share_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像共享状态",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Size
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像大小",
		//	  "type": "integer"
		//	}
		"size": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "镜像大小",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "快照一致性组ID，表示使用快照一致性组创建自定义镜像",
		//	  "type": "string"
		//	}
		"snapshot_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "快照一致性组ID，表示使用快照一致性组创建自定义镜像",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "系统盘快照ID，表示使用系统盘快照创建自定义镜像",
		//	  "type": "string"
		//	}
		"snapshot_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "系统盘快照ID，表示使用系统盘快照创建自定义镜像",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Snapshots
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像关联快照的信息",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Size": {
		//	        "description": "快照大小",
		//	        "type": "integer"
		//	      },
		//	      "SnapshotId": {
		//	        "description": "快照ID",
		//	        "type": "string"
		//	      },
		//	      "VolumeKind": {
		//	        "description": "云盘种类",
		//	        "enum": [
		//	          "system",
		//	          "data"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"snapshots": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Size
					"size": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "快照大小",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SnapshotId
					"snapshot_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "快照ID",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: VolumeKind
					"volume_kind": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "云盘种类",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "镜像关联快照的信息",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像的状态",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像的状态",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像更新时间",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像更新时间",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VirtualSize
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像大小，单位为Byte",
		//	  "type": "number"
		//	}
		"virtual_size": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "镜像大小，单位为Byte",
			Computed:    true,
			PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
				float64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Visibility
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "镜像的可见性",
		//	  "enum": [
		//	    "public",
		//	    "private",
		//	    "shared"
		//	  ],
		//	  "type": "string"
		//	}
		"visibility": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "镜像的可见性",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "镜像",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ECS::Image").WithTerraformTypeName("volcenginecc_ecs_image")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"architecture":                 "Architecture",
		"boot_mode":                    "BootMode",
		"created_at":                   "CreatedAt",
		"description":                  "Description",
		"detection_results":            "DetectionResults",
		"detection_status":             "DetectionStatus",
		"image_id":                     "ImageId",
		"image_name":                   "ImageName",
		"image_owner_id":               "ImageOwnerId",
		"instance_id":                  "InstanceId",
		"is_install_run_command_agent": "IsInstallRunCommandAgent",
		"is_lts":                       "IsLTS",
		"is_support_cloud_init":        "IsSupportCloudInit",
		"items":                        "Items",
		"kernel":                       "Kernel",
		"key":                          "Key",
		"license_type":                 "LicenseType",
		"name":                         "Name",
		"os_name":                      "OsName",
		"os_type":                      "OsType",
		"platform":                     "Platform",
		"platform_version":             "PlatformVersion",
		"project_name":                 "ProjectName",
		"result":                       "Result",
		"risk_code":                    "RiskCode",
		"risk_level":                   "RiskLevel",
		"share_permission":             "SharePermission",
		"share_status":                 "ShareStatus",
		"size":                         "Size",
		"snapshot_group_id":            "SnapshotGroupId",
		"snapshot_id":                  "SnapshotId",
		"snapshots":                    "Snapshots",
		"status":                       "Status",
		"tags":                         "Tags",
		"updated_at":                   "UpdatedAt",
		"value":                        "Value",
		"virtual_size":                 "VirtualSize",
		"visibility":                   "Visibility",
		"volume_kind":                  "VolumeKind",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
