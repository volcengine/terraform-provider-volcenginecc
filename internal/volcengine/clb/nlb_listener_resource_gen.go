// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package clb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_clb_nlb_listener", nLBListenerResource)
}

// nLBListenerResource returns the Terraform volcenginecc_clb_nlb_listener resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::CLB::NLBListener resource.
func nLBListenerResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CertificateId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。",
		//	  "type": "string"
		//	}
		"certificate_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// CertificateId is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ConnectionTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的连接超时时间（秒）。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"connection_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "监听器的连接超时时间（秒）。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的创建时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器描述信息。",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器描述信息。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Enabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否启用监听器。true：开启；false：关闭。",
		//	  "type": "boolean"
		//	}
		"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否启用监听器。true：开启；false：关闭。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
				boolplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EndPort
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "全端口监听的结束端口，仅当Port为0时有效。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"end_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "全端口监听的结束端口，仅当Port为0时有效。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1, 65535),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Health
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端实例健康检查响应信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "InstanceId": {
		//	        "description": "后端服务器的实例 ID或IP地址。",
		//	        "type": "string"
		//	      },
		//	      "Ip": {
		//	        "description": "后端服务器的IP地址。",
		//	        "format": "ipv4",
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "description": "后端服务器提供服务的端口。",
		//	        "format": "int64",
		//	        "maximum": 65535,
		//	        "minimum": 1,
		//	        "type": "integer"
		//	      },
		//	      "ServerId": {
		//	        "description": "后端服务器ID。",
		//	        "type": "string"
		//	      },
		//	      "ServerType": {
		//	        "description": "后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址",
		//	        "enum": [
		//	          "ecs",
		//	          "eni",
		//	          "ip"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Status": {
		//	        "description": "后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。",
		//	        "enum": [
		//	          "Up",
		//	          "Down",
		//	          "Unused"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "UpdatedTime": {
		//	        "description": "健康状态最后更新时间。",
		//	        "format": "date-time",
		//	        "type": "string"
		//	      },
		//	      "ZoneId": {
		//	        "description": "后端服务器接收访问流量的可用区ID。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"health": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: InstanceId
					"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的实例 ID或IP地址。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Ip
					"ip": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的IP地址。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "后端服务器提供服务的端口。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.Int64{ /*START VALIDATORS*/
							int64validator.Between(1, 65535),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ServerId
					"server_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器ID。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ServerType
					"server_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"ecs",
								"eni",
								"ip",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Status
					"status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"Up",
								"Down",
								"Unused",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: UpdatedTime
					"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
						CustomType:  timetypes.RFC3339Type{},
						Description: "健康状态最后更新时间。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ZoneId
					"zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器接收访问流量的可用区ID。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "后端实例健康检查响应信息。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ListenerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器唯一标识。",
		//	  "type": "string"
		//	}
		"listener_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器唯一标识。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ListenerName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器名称。",
		//	  "type": "string"
		//	}
		"listener_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器名称。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "负载均衡实例ID。",
		//	  "type": "string"
		//	}
		"load_balancer_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "负载均衡实例ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Port
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器接收请求的端口，0表示启用全端口监听。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "监听器接收请求的端口，0表示启用全端口监听。",
			Required:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(0, 65535),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听协议类型。",
		//	  "enum": [
		//	    "TCP",
		//	    "UDP",
		//	    "TLS"
		//	  ],
		//	  "type": "string"
		//	}
		"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听协议类型。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"TCP",
					"UDP",
					"TLS",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SecurityPolicyId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls_cipher_policy_1_0.tls_cipher_policy_1_1.tls_cipher_policy_1_2.tls_cipher_policy_1_2_strict.tls_cipher_policy_1_2_strict_with_1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。",
		//	  "type": "string"
		//	}
		"security_policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls_cipher_policy_1_0.tls_cipher_policy_1_1.tls_cipher_policy_1_2.tls_cipher_policy_1_2_strict.tls_cipher_policy_1_2_strict_with_1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// SecurityPolicyId is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器关联的服务器组ID。",
		//	  "type": "string"
		//	}
		"server_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器关联的服务器组ID。",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: StartPort
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "全端口监听的起始端口，仅当Port为0时有效。",
		//	  "format": "int64",
		//	  "maximum": 65535,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"start_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "全端口监听的起始端口，仅当Port为0时有效。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(1, 65535),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器的状态。",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器的状态。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "资源标签。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "资源标签。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "监听器最近操作时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "监听器最近操作时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "监听器负责根据指定的协议和端口，监听NLB实例接收到的用户访问请求。NLB将按照该监听器关联的服务器组配置的调度算法，将访问请求转发至该服务器组内健康的后端服务器。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::CLB::NLBListener").WithTerraformTypeName("volcenginecc_clb_nlb_listener")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"certificate_id":     "CertificateId",
		"connection_timeout": "ConnectionTimeout",
		"created_time":       "CreatedTime",
		"description":        "Description",
		"enabled":            "Enabled",
		"end_port":           "EndPort",
		"health":             "Health",
		"instance_id":        "InstanceId",
		"ip":                 "Ip",
		"key":                "Key",
		"listener_id":        "ListenerId",
		"listener_name":      "ListenerName",
		"load_balancer_id":   "LoadBalancerId",
		"port":               "Port",
		"protocol":           "Protocol",
		"security_policy_id": "SecurityPolicyId",
		"server_group_id":    "ServerGroupId",
		"server_id":          "ServerId",
		"server_type":        "ServerType",
		"start_port":         "StartPort",
		"status":             "Status",
		"tags":               "Tags",
		"updated_time":       "UpdatedTime",
		"value":              "Value",
		"zone_id":            "ZoneId",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/SecurityPolicyId",
		"/properties/CertificateId",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/ListenerId",
		"/properties/CreatedTime",
		"/properties/UpdatedTime",
		"/properties/Status",
		"/properties/HealthResponse",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/LoadBalancerId",
		"/properties/Protocol",
		"/properties/Port",
		"/properties/StartPort",
		"/properties/EndPort",
		"/properties/Enabled",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
