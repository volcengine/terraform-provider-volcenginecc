// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package clb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddResourceFactory("volcenginecc_clb_nlb_server_group", nLBServerGroupResource)
}

// nLBServerGroupResource returns the Terraform volcenginecc_clb_nlb_server_group resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::CLB::NLBServerGroup resource.
func nLBServerGroupResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "账号ID",
		//	  "type": "string"
		//	}
		"account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "账号ID",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AnyPortEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "是否开启全端口转发",
		//	  "type": "boolean"
		//	}
		"any_port_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启全端口转发",
			Optional:    true,
			Computed:    true,
			Default:     booldefault.StaticBool(false),
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
				boolplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BypassSecurityGroupEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数",
		//	  "type": "boolean"
		//	}
		"bypass_security_group_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数",
			Optional:    true,
			Computed:    true,
			Default:     booldefault.StaticBool(false),
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConnectionDrainEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "是否开启连接优雅中断",
		//	  "type": "boolean"
		//	}
		"connection_drain_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启连接优雅中断",
			Optional:    true,
			Computed:    true,
			Default:     booldefault.StaticBool(false),
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConnectionDrainTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"connection_drain_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的创建时间",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的创建时间",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。",
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(0, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HealthCheck
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "健康检查相关参数",
		//	  "properties": {
		//	    "Domain": {
		//	      "description": "健康检查的域名",
		//	      "type": "string"
		//	    },
		//	    "Enabled": {
		//	      "default": true,
		//	      "description": "是否开启健康检查",
		//	      "type": "boolean"
		//	    },
		//	    "HealthyThreshold": {
		//	      "default": 3,
		//	      "description": "健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "HttpCode": {
		//	      "description": "健康检查正常的HTTP状态码",
		//	      "type": "string"
		//	    },
		//	    "Interval": {
		//	      "default": 10,
		//	      "description": "健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "Method": {
		//	      "default": "GET",
		//	      "description": "健康检查的请求方法",
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "Timeout": {
		//	      "default": 3,
		//	      "description": "健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "Type": {
		//	      "default": "TCP",
		//	      "description": "健康检查的协议类型",
		//	      "enum": [
		//	        "TCP",
		//	        "HTTP",
		//	        "UDP"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "UdpExpect": {
		//	      "description": "UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。",
		//	      "maxLength": 64,
		//	      "type": "string"
		//	    },
		//	    "UdpRequest": {
		//	      "description": "UDP健康检查的预期响应字符串",
		//	      "maxLength": 64,
		//	      "type": "string"
		//	    },
		//	    "UnhealthyThreshold": {
		//	      "default": 3,
		//	      "description": "健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "Uri": {
		//	      "description": "健康检查的路径",
		//	      "maxLength": 128,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"health_check": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Domain
				"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的域名",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "是否开启健康检查",
					Optional:    true,
					Computed:    true,
					Default:     booldefault.StaticBool(true),
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HealthyThreshold
				"healthy_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(3),
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HttpCode
				"http_code": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查正常的HTTP状态码",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Interval
				"interval": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(10),
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Method
				"method": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的请求方法",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("GET"),
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Timeout
				"timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(3),
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的协议类型",
					Optional:    true,
					Computed:    true,
					Default:     stringdefault.StaticString("TCP"),
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"TCP",
							"HTTP",
							"UDP",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: UdpExpect
				"udp_expect": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthAtMost(64),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: UdpRequest
				"udp_request": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "UDP健康检查的预期响应字符串",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthAtMost(64),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: UnhealthyThreshold
				"unhealthy_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(3),
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Uri
				"uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "健康检查的路径",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthAtMost(128),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "健康检查相关参数",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IpAddressVersion
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "ipv4",
		//	  "description": "服务器组的IP地址类型",
		//	  "enum": [
		//	    "ipv4",
		//	    "ipv6"
		//	  ],
		//	  "type": "string"
		//	}
		"ip_address_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组的IP地址类型",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("ipv4"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ipv4",
					"ipv6",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PreserveClientIpEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否开启源地址保持",
		//	  "type": "boolean"
		//	}
		"preserve_client_ip_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启源地址保持",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "项目名称",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "项目名称",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "NLB转发流量到后端服务器时使用的通信协议",
		//	  "enum": [
		//	    "TCP",
		//	    "UDP"
		//	  ],
		//	  "type": "string"
		//	}
		"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "NLB转发流量到后端服务器时使用的通信协议",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"TCP",
					"UDP",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProxyProtocolType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "off",
		//	  "description": "是否开启Proxy-Protocol协议",
		//	  "enum": [
		//	    "off",
		//	    "standard"
		//	  ],
		//	  "type": "string"
		//	}
		"proxy_protocol_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启Proxy-Protocol协议",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("off"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"off",
					"standard",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RelatedLoadBalancerIds
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组关联的NLB实例",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"related_load_balancer_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "服务器组关联的NLB实例",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Scheduler
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "wrr",
		//	  "description": "NLB转发流量时遵循的规则",
		//	  "enum": [
		//	    "wrr",
		//	    "wlc",
		//	    "sh"
		//	  ],
		//	  "type": "string"
		//	}
		"scheduler": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "NLB转发流量时遵循的规则",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("wrr"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"wrr",
					"wlc",
					"sh",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerCount
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组中后端服务器的数量",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"server_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "服务器组中后端服务器的数量",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组ID",
		//	  "type": "string"
		//	}
		"server_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组ID",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerGroupName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"server_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Servers
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组中待添加后端服务器的信息",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Description": {
		//	        "description": "后端服务器的描述，默认值为空字符串",
		//	        "maxLength": 255,
		//	        "type": "string"
		//	      },
		//	      "InstanceId": {
		//	        "description": "服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。",
		//	        "type": "string"
		//	      },
		//	      "Ip": {
		//	        "description": "后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。",
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "description": "后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。",
		//	        "format": "int64",
		//	        "type": "integer"
		//	      },
		//	      "ServerId": {
		//	        "description": "后端服务器 ID",
		//	        "type": "string"
		//	      },
		//	      "Type": {
		//	        "description": "后端服务器的类型",
		//	        "enum": [
		//	          "ecs",
		//	          "eni",
		//	          "ip"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Weight": {
		//	        "description": "后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0",
		//	        "format": "int64",
		//	        "type": "integer"
		//	      },
		//	      "ZoneId": {
		//	        "description": "指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"servers": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Description
					"description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的描述，默认值为空字符串",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(255),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: InstanceId
					"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Ip
					"ip": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ServerId
					"server_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器 ID",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的类型",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"ecs",
								"eni",
								"ip",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Weight
					"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ZoneId
					"zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "服务器组中待添加后端服务器的信息\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SessionPersistenceEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "是否开启会话保持",
		//	  "type": "boolean"
		//	}
		"session_persistence_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启会话保持",
			Optional:    true,
			Computed:    true,
			Default:     booldefault.StaticBool(false),
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SessionPersistenceTimeout
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": 1000,
		//	  "description": "会话保持的超时时间，取值范围为1～3600秒，默认1000秒",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"session_persistence_timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "会话保持的超时时间，取值范围为1～3600秒，默认1000秒",
			Optional:    true,
			Computed:    true,
			Default:     int64default.StaticInt64(1000),
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组的状态",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组的状态",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "标签",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "标签\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TimestampRemoveEnabled
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能",
		//	  "type": "boolean"
		//	}
		"timestamp_remove_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Type
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "instance",
		//	  "description": "服务器组的类型",
		//	  "enum": [
		//	    "instance",
		//	    "ip"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组的类型",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("instance"),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"instance",
					"ip",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "后端服务器组的更新时间",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "后端服务器组的更新时间",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "服务器组所属私有网络的ID。",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "服务器组所属私有网络的ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "服务器组",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::CLB::NLBServerGroup").WithTerraformTypeName("volcenginecc_clb_nlb_server_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":                    "AccountId",
		"any_port_enabled":              "AnyPortEnabled",
		"bypass_security_group_enabled": "BypassSecurityGroupEnabled",
		"connection_drain_enabled":      "ConnectionDrainEnabled",
		"connection_drain_timeout":      "ConnectionDrainTimeout",
		"created_time":                  "CreatedTime",
		"description":                   "Description",
		"domain":                        "Domain",
		"enabled":                       "Enabled",
		"health_check":                  "HealthCheck",
		"healthy_threshold":             "HealthyThreshold",
		"http_code":                     "HttpCode",
		"instance_id":                   "InstanceId",
		"interval":                      "Interval",
		"ip":                            "Ip",
		"ip_address_version":            "IpAddressVersion",
		"key":                           "Key",
		"method":                        "Method",
		"port":                          "Port",
		"preserve_client_ip_enabled":    "PreserveClientIpEnabled",
		"project_name":                  "ProjectName",
		"protocol":                      "Protocol",
		"proxy_protocol_type":           "ProxyProtocolType",
		"related_load_balancer_ids":     "RelatedLoadBalancerIds",
		"scheduler":                     "Scheduler",
		"server_count":                  "ServerCount",
		"server_group_id":               "ServerGroupId",
		"server_group_name":             "ServerGroupName",
		"server_id":                     "ServerId",
		"servers":                       "Servers",
		"session_persistence_enabled":   "SessionPersistenceEnabled",
		"session_persistence_timeout":   "SessionPersistenceTimeout",
		"status":                        "Status",
		"tags":                          "Tags",
		"timeout":                       "Timeout",
		"timestamp_remove_enabled":      "TimestampRemoveEnabled",
		"type":                          "Type",
		"udp_expect":                    "UdpExpect",
		"udp_request":                   "UdpRequest",
		"unhealthy_threshold":           "UnhealthyThreshold",
		"updated_time":                  "UpdatedTime",
		"uri":                           "Uri",
		"value":                         "Value",
		"vpc_id":                        "VpcId",
		"weight":                        "Weight",
		"zone_id":                       "ZoneId",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/CreateTime",
		"/properties/RelatedLoadBalancerIds",
		"/properties/ServerCount",
		"/properties/ServerGroupId",
		"/properties/Status",
		"/properties/UpdateTime",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/AccountId",
		"/properties/AnyPortEnabled",
		"/properties/ProjectName",
		"/properties/Protocol",
		"/properties/Type",
		"/properties/IpAddressVersion",
		"/properties/VpcId",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
