// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package vpc

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_vpc_subnet", subnetDataSource)
}

// subnetDataSource returns the Terraform volcenginecc_vpc_subnet data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::VPC::Subnet resource.
func subnetDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网所属账户的ID。",
		//	  "type": "string"
		//	}
		"account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网所属账户的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AvailableIpAddressCount
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网中可用的IP地址数量。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"available_ip_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "子网中可用的IP地址数量。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CidrBlock
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网的IPv4网段。",
		//	  "type": "string"
		//	}
		"cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网的IPv4网段。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网的创建时间。",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网的创建时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。",
		//	  "maxLength": 255,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnableIpv6
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。",
		//	  "type": "boolean"
		//	}
		"enable_ipv_6": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6CidrBlock
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。",
		//	  "maximum": 255,
		//	  "type": "string"
		//	}
		"ipv_6_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IsDefault
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。",
		//	  "type": "boolean"
		//	}
		"is_default": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkAclId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网关联的网络ACL的ID。",
		//	  "type": "string"
		//	}
		"network_acl_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网关联的网络ACL的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网所在VPC实例所属项目的名称。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网所在VPC实例所属项目的名称。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RouteTable
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "路由表信息。",
		//	  "properties": {
		//	    "RouteTableId": {
		//	      "description": "子网关联的路由表ID。",
		//	      "type": "string"
		//	    },
		//	    "RouteTableType": {
		//	      "description": "子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"route_table": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RouteTableId
				"route_table_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "子网关联的路由表ID。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RouteTableType
				"route_table_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "路由表信息。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网的状态。1、Pending：表示配置中。2、Available：表示可用。",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网的状态。1、Pending：表示配置中。2、Available：表示可用。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "待修改信息的子网的ID。",
		//	  "type": "string"
		//	}
		"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "待修改信息的子网的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"subnet_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "子网的标签信息。",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "用户标签的标签键。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "用户标签的标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户标签的标签键。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "用户标签的标签值。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TotalIpv4Count
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网下可用IP总数。",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"total_ipv_4_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "子网下可用IP总数。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网的更新时间。",
		//	  "type": "string"
		//	}
		"updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网的更新时间。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "子网所属VPC的ID。",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "子网所属VPC的ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ZoneId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。",
		//	  "type": "string"
		//	}
		"zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::VPC::Subnet",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::VPC::Subnet").WithTerraformTypeName("volcenginecc_vpc_subnet")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":                 "AccountId",
		"available_ip_address_count": "AvailableIpAddressCount",
		"cidr_block":                 "CidrBlock",
		"created_time":               "CreatedTime",
		"description":                "Description",
		"enable_ipv_6":               "EnableIpv6",
		"ipv_6_cidr_block":           "Ipv6CidrBlock",
		"is_default":                 "IsDefault",
		"key":                        "Key",
		"network_acl_id":             "NetworkAclId",
		"project_name":               "ProjectName",
		"route_table":                "RouteTable",
		"route_table_id":             "RouteTableId",
		"route_table_type":           "RouteTableType",
		"status":                     "Status",
		"subnet_id":                  "SubnetId",
		"subnet_name":                "SubnetName",
		"tags":                       "Tags",
		"total_ipv_4_count":          "TotalIpv4Count",
		"updated_time":               "UpdatedTime",
		"value":                      "Value",
		"vpc_id":                     "VpcId",
		"zone_id":                    "ZoneId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
