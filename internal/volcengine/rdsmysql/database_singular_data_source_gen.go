// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package rdsmysql

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_rdsmysql_database", databaseDataSource)
}

// databaseDataSource returns the Terraform volcenginecc_rdsmysql_database data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::RDSMySQL::Database resource.
func databaseDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CharacterSetName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "utf8mb4",
		//	  "description": "数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。",
		//	  "enum": [
		//	    "utf8",
		//	    "utf8mb4",
		//	    "latin1",
		//	    "ascii"
		//	  ],
		//	  "type": "string"
		//	}
		"character_set_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DatabasePrivileges
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "授权数据库权限信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "AccountName": {
		//	        "description": "数据库账号名称。",
		//	        "type": "string"
		//	      },
		//	      "AccountPrivilege": {
		//	        "description": "授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。",
		//	        "enum": [
		//	          "ReadWrite",
		//	          "ReadOnly",
		//	          "DDLOnly",
		//	          "DMLOnly",
		//	          "Custom"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "AccountPrivilegeDetail": {
		//	        "description": "数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。",
		//	        "type": "string"
		//	      },
		//	      "Host": {
		//	        "description": "指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"database_privileges": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AccountName
					"account_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "数据库账号名称。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AccountPrivilege
					"account_privilege": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AccountPrivilegeDetail
					"account_privilege_detail": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Host
					"host": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "授权数据库权限信息。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。",
		//	  "maxLength": 256,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "数据库实例 ID。",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "数据库实例 ID。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。",
		//	  "maxLength": 64,
		//	  "minLength": 2,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::RDSMySQL::Database",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::RDSMySQL::Database").WithTerraformTypeName("volcenginecc_rdsmysql_database")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_name":             "AccountName",
		"account_privilege":        "AccountPrivilege",
		"account_privilege_detail": "AccountPrivilegeDetail",
		"character_set_name":       "CharacterSetName",
		"database_privileges":      "DatabasePrivileges",
		"description":              "Description",
		"host":                     "Host",
		"instance_id":              "InstanceId",
		"name":                     "Name",
		"status":                   "Status",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
