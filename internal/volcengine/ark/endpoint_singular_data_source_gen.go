// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ark

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_ark_endpoint", endpointDataSource)
}

// endpointDataSource returns the Terraform volcenginecc_ark_endpoint data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::ARK::Endpoint resource.
func endpointDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: BatchOnly
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口",
		//	  "type": "boolean"
		//	}
		"batch_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Certificate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书信息",
		//	  "properties": {
		//	    "NotAfter": {
		//	      "description": "X509私有证书过期的时间。使用秒级时间戳表示",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "NotBefore": {
		//	      "description": "X509私有证书开始生效的时间。使用秒级时间戳表示",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "PCAHost": {
		//	      "description": "证书方",
		//	      "type": "string"
		//	    },
		//	    "PCAInstanceCertificate": {
		//	      "description": "PEM 格式的叶子证书",
		//	      "type": "string"
		//	    },
		//	    "PCAName": {
		//	      "description": "证书名称",
		//	      "type": "string"
		//	    },
		//	    "PCARootCACertificate": {
		//	      "description": "PEM 格式的根证书",
		//	      "type": "string"
		//	    },
		//	    "PCASubCACertificate": {
		//	      "description": "PEM 格式的中间根证书和根证书",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"certificate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NotAfter
				"not_after": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "X509私有证书过期的时间。使用秒级时间戳表示",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: NotBefore
				"not_before": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "X509私有证书开始生效的时间。使用秒级时间戳表示",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCAHost
				"pca_host": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "证书方",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCAInstanceCertificate
				"pca_instance_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "PEM 格式的叶子证书",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCAName
				"pca_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "证书名称",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCARootCACertificate
				"pca_root_ca_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "PEM 格式的根证书",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCASubCACertificate
				"pca_sub_ca_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "PEM 格式的中间根证书和根证书",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "证书信息",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点描述",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点描述",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DryRun
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否仅对此请求进行预检。取值：true：发送检查请求。false(默认)：发送正常请求",
		//	  "type": "boolean"
		//	}
		"dry_run": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否仅对此请求进行预检。取值：true：发送检查请求。false(默认)：发送正常请求",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointModelType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点模型类型。取值:FoundationModel： 基础模型;CustomModel：定制模型",
		//	  "enum": [
		//	    "FoundationModel",
		//	    "CustomModel"
		//	  ],
		//	  "type": "string"
		//	}
		"endpoint_model_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点模型类型。取值:FoundationModel： 基础模型;CustomModel：定制模型",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "推理接入点的ID",
		//	  "type": "string"
		//	}
		"endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "推理接入点的ID",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ModelReference
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点接入模型",
		//	  "properties": {
		//	    "CustomModelId": {
		//	      "description": "定制模型的ID",
		//	      "type": "string"
		//	    },
		//	    "FoundationModel": {
		//	      "description": "基础模型",
		//	      "properties": {
		//	        "ModelVersion": {
		//	          "description": "基础模型版本",
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "基础模型名称",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"model_reference": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomModelId
				"custom_model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "定制模型的ID",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: FoundationModel
				"foundation_model": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ModelVersion
						"model_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "基础模型版本",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "基础模型名称",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "基础模型",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "接入点接入模型",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ModelUnitId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "模型单元",
		//	  "type": "string"
		//	}
		"model_unit_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "模型单元",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Moderation
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "内容护栏方案",
		//	  "properties": {
		//	    "Strategy": {
		//	      "description": "内容安全护栏方案。取值:Default: 默认方案。更低延迟，广泛覆盖内容安全通用需求;Basic：基本方案（公测中）。支持在接口响应中提供命中的风险分类，暂时只包含严重违规和激进行为两类风险。注意：如果是流式接口调用，不建议此方案，会导致吐出的每个分片的长度变长，延时变高",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"moderation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Strategy
				"strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "内容安全护栏方案。取值:Default: 默认方案。更低延迟，广泛覆盖内容安全通用需求;Basic：基本方案（公测中）。支持在接口响应中提供命中的风险分类，暂时只包含严重违规和激进行为两类风险。注意：如果是流式接口调用，不建议此方案，会导致吐出的每个分片的长度变长，延时变高",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "内容护栏方案",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点名称",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点名称",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "项目名称",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "项目名称",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RateLimit
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点限流",
		//	  "properties": {
		//	    "Rpm": {
		//	      "description": "Requests Per Minute，每分钟请求数",
		//	      "format": "int32",
		//	      "type": "integer"
		//	    },
		//	    "Tpm": {
		//	      "description": "Tokens Per Minute，每分钟请求 token 数",
		//	      "format": "int32",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"rate_limit": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Rpm
				"rpm": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Requests Per Minute，每分钟请求数",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Tpm
				"tpm": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Tokens Per Minute，每分钟请求 token 数",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "接入点限流",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RollingId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点切换的Id",
		//	  "type": "string"
		//	}
		"rolling_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点切换的Id",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScaleTierId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "如果存在 TPM 保障包，则为 TPM 保障包 ID",
		//	  "type": "string"
		//	}
		"scale_tier_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "如果存在 TPM 保障包，则为 TPM 保障包 ID",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点状态",
		//	  "enum": [
		//	    "Running",
		//	    "Scheduling",
		//	    "Abnormal",
		//	    "Stopped"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点状态",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StatusReason
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "状态附加说明信息",
		//	  "type": "string"
		//	}
		"status_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "状态附加说明信息",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SupportRolling
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否支持接入点切换模型版本",
		//	  "type": "boolean"
		//	}
		"support_rolling": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否支持接入点切换模型版本",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SupportScaleTier
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否支持TPM保障包",
		//	  "type": "boolean"
		//	}
		"support_scale_tier": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否支持TPM保障包",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::ARK::Endpoint",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ARK::Endpoint").WithTerraformTypeName("volcenginecc_ark_endpoint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"batch_only":               "BatchOnly",
		"certificate":              "Certificate",
		"custom_model_id":          "CustomModelId",
		"description":              "Description",
		"dry_run":                  "DryRun",
		"endpoint_id":              "Id",
		"endpoint_model_type":      "EndpointModelType",
		"foundation_model":         "FoundationModel",
		"key":                      "Key",
		"model_reference":          "ModelReference",
		"model_unit_id":            "ModelUnitId",
		"model_version":            "ModelVersion",
		"moderation":               "Moderation",
		"name":                     "Name",
		"not_after":                "NotAfter",
		"not_before":               "NotBefore",
		"pca_host":                 "PCAHost",
		"pca_instance_certificate": "PCAInstanceCertificate",
		"pca_name":                 "PCAName",
		"pca_root_ca_certificate":  "PCARootCACertificate",
		"pca_sub_ca_certificate":   "PCASubCACertificate",
		"project_name":             "ProjectName",
		"rate_limit":               "RateLimit",
		"rolling_id":               "RollingId",
		"rpm":                      "Rpm",
		"scale_tier_id":            "ScaleTierId",
		"status":                   "Status",
		"status_reason":            "StatusReason",
		"strategy":                 "Strategy",
		"support_rolling":          "SupportRolling",
		"support_scale_tier":       "SupportScaleTier",
		"tags":                     "Tags",
		"tpm":                      "Tpm",
		"value":                    "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
