// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ark

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_ark_endpoint", endpointResource)
}

// endpointResource returns the Terraform volcenginecc_ark_endpoint resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::ARK::Endpoint resource.
func endpointResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: BatchOnly
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。",
		//	  "type": "boolean"
		//	}
		"batch_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Certificate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "证书信息。",
		//	  "properties": {
		//	    "NotAfter": {
		//	      "description": "X509私有证书过期的时间。使用秒级时间戳表示。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "NotBefore": {
		//	      "description": "X509私有证书开始生效的时间。使用秒级时间戳表示。",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    },
		//	    "PCAHost": {
		//	      "description": "证书方。",
		//	      "type": "string"
		//	    },
		//	    "PCAInstanceCertificate": {
		//	      "description": "PEM 格式的叶子证书。",
		//	      "type": "string"
		//	    },
		//	    "PCAName": {
		//	      "description": "证书名称。",
		//	      "type": "string"
		//	    },
		//	    "PCARootCACertificate": {
		//	      "description": "PEM 格式的根证书。",
		//	      "type": "string"
		//	    },
		//	    "PCASubCACertificate": {
		//	      "description": "PEM 格式的中间根证书和根证书。",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"certificate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NotAfter
				"not_after": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "X509私有证书过期的时间。使用秒级时间戳表示。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: NotBefore
				"not_before": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "X509私有证书开始生效的时间。使用秒级时间戳表示。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCAHost
				"pca_host": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "证书方。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCAInstanceCertificate
				"pca_instance_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "PEM 格式的叶子证书。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCAName
				"pca_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "证书名称。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCARootCACertificate
				"pca_root_ca_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "PEM 格式的根证书。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PCASubCACertificate
				"pca_sub_ca_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "PEM 格式的中间根证书和根证书。",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "证书信息。",
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点创建时间，RFC3339格式。",
		//	  "type": "string"
		//	}
		"create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点创建时间，RFC3339格式。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点描述。",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点描述。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EndpointId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "推理接入点的ID。",
		//	  "type": "string"
		//	}
		"endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "推理接入点的ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EndpointModelType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。",
		//	  "enum": [
		//	    "FoundationModel",
		//	    "CustomModel"
		//	  ],
		//	  "type": "string"
		//	}
		"endpoint_model_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ModelReference
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点接入模型。",
		//	  "properties": {
		//	    "CustomModelId": {
		//	      "description": "定制模型的ID。",
		//	      "type": "string"
		//	    },
		//	    "FoundationModel": {
		//	      "description": "基础模型。",
		//	      "properties": {
		//	        "ModelVersion": {
		//	          "description": "基础模型版本。",
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "基础模型名称。请注意模型名称为小写。doubao 1.5 代模型的模型名称格式为\"doubao-1-5-**\"。",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"model_reference": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomModelId
				"custom_model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "定制模型的ID。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: FoundationModel
				"foundation_model": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ModelVersion
						"model_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "基础模型版本。",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "基础模型名称。请注意模型名称为小写。doubao 1.5 代模型的模型名称格式为\"doubao-1-5-**\"。",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "基础模型。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "接入点接入模型。",
			Required:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ModelUnitId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "模型单元，为空表示后付费；否则预付费。",
		//	  "type": "string"
		//	}
		"model_unit_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "模型单元，为空表示后付费；否则预付费。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Moderation
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "内容护栏方案。",
		//	  "properties": {
		//	    "Strategy": {
		//	      "description": "内容安全护栏方案。取值:Default: 默认方案。更低延迟，广泛覆盖内容安全通用需求;Basic：基本方案（公测中）。支持在接口响应中提供命中的风险分类，暂时只包含严重违规和激进行为两类风险。注意：如果是流式接口调用，不建议此方案，会导致吐出的每个分片的长度变长，延时变高。",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"moderation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Strategy
				"strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "内容安全护栏方案。取值:Default: 默认方案。更低延迟，广泛覆盖内容安全通用需求;Basic：基本方案（公测中）。支持在接口响应中提供命中的风险分类，暂时只包含严重违规和激进行为两类风险。注意：如果是流式接口调用，不建议此方案，会导致吐出的每个分片的长度变长，延时变高。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "内容护栏方案。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点名称。",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点名称。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "default": "default",
		//	  "description": "资源所属的项目名称，默认值为default。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "资源所属的项目名称，默认值为default。",
			Optional:    true,
			Computed:    true,
			Default:     stringdefault.StaticString("default"),
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RateLimit
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点限流。",
		//	  "properties": {
		//	    "Rpm": {
		//	      "description": "Requests Per Minute，每分钟请求数。",
		//	      "format": "int32",
		//	      "type": "integer"
		//	    },
		//	    "Tpm": {
		//	      "description": "Tokens Per Minute，每分钟请求 token 数。",
		//	      "format": "int32",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"rate_limit": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Rpm
				"rpm": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Requests Per Minute，每分钟请求数。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Tpm
				"tpm": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Tokens Per Minute，每分钟请求 token 数。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "接入点限流。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RollingId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点切换的Id。",
		//	  "type": "string"
		//	}
		"rolling_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点切换的Id。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ScaleTierId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "如果存在 TPM 保障包，则为 TPM 保障包 ID。",
		//	  "type": "string"
		//	}
		"scale_tier_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "如果存在 TPM 保障包，则为 TPM 保障包 ID。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点状态。",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点状态。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StatusReason
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "状态附加说明信息。",
		//	  "type": "string"
		//	}
		"status_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "状态附加说明信息。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SupportRolling
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否支持接入点切换模型版本。",
		//	  "type": "boolean"
		//	}
		"support_rolling": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否支持接入点切换模型版本。",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SupportScaleTier
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "是否支持TPM保障包。",
		//	  "type": "boolean"
		//	}
		"support_scale_tier": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "是否支持TPM保障包。",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点绑定的标签。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "接入点绑定的标签。\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
				setplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "接入点更新时间，RFC3339格式。",
		//	  "type": "string"
		//	}
		"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "接入点更新时间，RFC3339格式。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "在使用大语言模型进行推理服务时，推理接入点（Endpoint）是模型调用的关键入口。开发者只需通过指定的 ID 即可向大模型发起 API / SDK 推理请求，实现快速接入与灵活调用。系统提供统一的 API 调用方式、调用监控、限流策略与安全保障机制，确保推理过程的稳定性与安全性。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::ARK::Endpoint").WithTerraformTypeName("volcenginecc_ark_endpoint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"batch_only":               "BatchOnly",
		"certificate":              "Certificate",
		"create_time":              "CreateTime",
		"custom_model_id":          "CustomModelId",
		"description":              "Description",
		"endpoint_id":              "EndpointId",
		"endpoint_model_type":      "EndpointModelType",
		"foundation_model":         "FoundationModel",
		"key":                      "Key",
		"model_reference":          "ModelReference",
		"model_unit_id":            "ModelUnitId",
		"model_version":            "ModelVersion",
		"moderation":               "Moderation",
		"name":                     "Name",
		"not_after":                "NotAfter",
		"not_before":               "NotBefore",
		"pca_host":                 "PCAHost",
		"pca_instance_certificate": "PCAInstanceCertificate",
		"pca_name":                 "PCAName",
		"pca_root_ca_certificate":  "PCARootCACertificate",
		"pca_sub_ca_certificate":   "PCASubCACertificate",
		"project_name":             "ProjectName",
		"rate_limit":               "RateLimit",
		"rolling_id":               "RollingId",
		"rpm":                      "Rpm",
		"scale_tier_id":            "ScaleTierId",
		"status":                   "Status",
		"status_reason":            "StatusReason",
		"strategy":                 "Strategy",
		"support_rolling":          "SupportRolling",
		"support_scale_tier":       "SupportScaleTier",
		"tags":                     "Tags",
		"tpm":                      "Tpm",
		"update_time":              "UpdateTime",
		"value":                    "Value",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/EndpointId",
		"/properties/BatchOnly",
		"/properties/EndpointModelType",
		"/properties/Status",
		"/properties/StatusReason",
		"/properties/SupportRolling",
		"/properties/RollingId",
		"/properties/ScaleTierId",
		"/properties/SupportScaleTier",
		"/properties/Certificate",
		"/properties/CreateTime",
		"/properties/UpdateTime",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/ProjectName",
		"/properties/ModelUnitId",
		"/properties/ModelReference",
		"/properties/Name",
		"/properties/Description",
		"/properties/Tags",
		"/properties/RateLimit",
		"/properties/Moderation",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
