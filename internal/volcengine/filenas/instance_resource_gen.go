// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package filenas

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_filenas_instance", instanceResource)
}

// instanceResource returns the Terraform volcenginecc_filenas_instance resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::FileNAS::Instance resource.
func instanceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CachePerformance
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "缓存型性能信息。",
		//	  "properties": {
		//	    "CacheBandwidth": {
		//	      "description": "预配置带宽，用于增加文件系统带宽。",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"cache_performance": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CacheBandwidth
				"cache_bandwidth": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "预配置带宽，用于增加文件系统带宽。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "缓存型性能信息。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Capacity
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统容量。",
		//	  "properties": {
		//	    "Total": {
		//	      "description": "文件系统可用总容量，单位为 GiB。",
		//	      "type": "number"
		//	    },
		//	    "Used": {
		//	      "description": "文件系统已使用容量，单位为 MiB。",
		//	      "type": "number"
		//	    }
		//	  },
		//	  "required": [
		//	    "Total"
		//	  ],
		//	  "type": "object"
		//	}
		"capacity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Total
				"total": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "文件系统可用总容量，单位为 GiB。",
					Optional:    true,
					Computed:    true,
					Validators: []validator.Float64{ /*START VALIDATORS*/
						fwvalidators.NotNullFloat64(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
						float64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Used
				"used": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "文件系统已使用容量，单位为 MiB。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
						float64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "文件系统容量。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ChargeType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "计费类型，取值 PayAsYouGo，表示按量计费。",
		//	  "type": "string"
		//	}
		"charge_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "计费类型，取值 PayAsYouGo，表示按量计费。",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "创建时间",
		//	  "type": "string"
		//	}
		"create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "创建时间",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "描述信息。",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "描述信息。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FileSystemId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统 ID。",
		//	  "type": "string"
		//	}
		"file_system_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "文件系统 ID。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FileSystemName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统名称。",
		//	  "type": "string"
		//	}
		"file_system_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "文件系统名称。",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: FileSystemType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。",
		//	  "enum": [
		//	    "Extreme",
		//	    "Capacity",
		//	    "Cache"
		//	  ],
		//	  "type": "string"
		//	}
		"file_system_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"Extreme",
					"Capacity",
					"Cache",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "所属项目，默认值为 default 项目。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "所属项目，默认值为 default 项目。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProtocolType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。",
		//	  "type": "string"
		//	}
		"protocol_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotCount
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "快照数量",
		//	  "type": "integer"
		//	}
		"snapshot_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "快照数量",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。",
		//	  "type": "string"
		//	}
		"snapshot_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统状态",
		//	  "enum": [
		//	    "Unknown",
		//	    "Running",
		//	    "Creating",
		//	    "Expanding",
		//	    "Error",
		//	    "Deleting",
		//	    "DeleteError",
		//	    "Deleted",
		//	    "Stopped"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "文件系统状态",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StorageType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储类型，取值Standard，表示标准型。",
		//	  "type": "string"
		//	}
		"storage_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "存储类型，取值Standard，表示标准型。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "文件系统的标签信息",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "资源标签。",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键。",
		//	        "type": "string"
		//	      },
		//	      "Type": {
		//	        "description": "标签类型。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签类型。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "文件系统的标签信息\n 特别提示: 在使用 ListNestedAttribute 或 SetNestedAttribute 时，必须完整定义其嵌套结构体的所有属性。若定义不完整，Terraform 在执行计划对比时可能会检测到意料之外的差异，从而触发不必要的资源更新，影响资源的稳定性与可预测性。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdateTime
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "更新时间",
		//	  "type": "string"
		//	}
		"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "更新时间",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ZoneId
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "可用区 ID。",
		//	  "type": "string"
		//	}
		"zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "可用区 ID。",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ZoneName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "可用区名称。",
		//	  "type": "string"
		//	}
		"zone_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "可用区名称。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "文件系统通过标准的 NFS 协议为您提供文件存储服务，用于网络文件远程访问，通过管理控制台创建挂载地址后，即可按需在客户端中通过标准的 POSIX 接口对文件系统进行访问。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::FileNAS::Instance").WithTerraformTypeName("volcenginecc_filenas_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"cache_bandwidth":   "CacheBandwidth",
		"cache_performance": "CachePerformance",
		"capacity":          "Capacity",
		"charge_type":       "ChargeType",
		"create_time":       "CreateTime",
		"description":       "Description",
		"file_system_id":    "FileSystemId",
		"file_system_name":  "FileSystemName",
		"file_system_type":  "FileSystemType",
		"key":               "Key",
		"project_name":      "ProjectName",
		"protocol_type":     "ProtocolType",
		"snapshot_count":    "SnapshotCount",
		"snapshot_id":       "SnapshotId",
		"status":            "Status",
		"storage_type":      "StorageType",
		"tags":              "Tags",
		"total":             "Total",
		"type":              "Type",
		"update_time":       "UpdateTime",
		"used":              "Used",
		"value":             "Value",
		"zone_id":           "ZoneId",
		"zone_name":         "ZoneName",
	})

	opts = opts.WithReadOnlyPropertyPaths([]string{
		"/properties/CreateTime",
		"/properties/UpdateTime",
		"/properties/Status",
		"/properties/SnapshotCount",
	})

	opts = opts.WithCreateOnlyPropertyPaths([]string{
		"/properties/FileSystemType",
		"/properties/ProtocolType",
		"/properties/ZoneId",
		"/properties/ProjectName",
		"/properties/SnapshotId",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
