// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package tos

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
	fwvalidators "github.com/volcengine/terraform-provider-volcenginecc/internal/validators"
)

func init() {
	registry.AddResourceFactory("volcenginecc_tos_bucket", bucketResource)
}

// bucketResource returns the Terraform volcenginecc_tos_bucket resource.
// This Terraform resource corresponds to the Cloud Control Volcengine::TOS::Bucket resource.
func bucketResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ACL
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的访问控制权限。",
		//	  "properties": {
		//	    "BucketACLDelivered": {
		//	      "description": "是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。",
		//	      "type": "boolean"
		//	    },
		//	    "Grants": {
		//	      "description": "对象的访问控制权限根节点。",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "properties": {
		//	          "Grantee": {
		//	            "description": "被授权用户信息。",
		//	            "properties": {
		//	              "Canned": {
		//	                "description": "预定义组。包括AllUsers、AuthenticatedUsers。",
		//	                "enum": [
		//	                  "AllUsers",
		//	                  "AuthenticatedUsers"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "DisplayName": {
		//	                "description": "展示名。",
		//	                "type": "string"
		//	              },
		//	              "ID": {
		//	                "description": "账号ID。",
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "description": "用户类型。包括Group、CanonicalUser。",
		//	                "enum": [
		//	                  "Group",
		//	                  "CanonicalUser"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Permission": {
		//	            "description": "授权类型。包括READ、READ_NON_LIST、WRITE、READ_ACP、WRITE_ACP、FULL_CONTROL。",
		//	            "enum": [
		//	              "READ",
		//	              "READ_NON_LIST",
		//	              "WRITE",
		//	              "READ_ACP",
		//	              "WRITE_ACP",
		//	              "FULL_CONTROL"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Owner": {
		//	      "description": "对象所有者。",
		//	      "properties": {
		//	        "DisplayName": {
		//	          "description": "展示名。",
		//	          "type": "string"
		//	        },
		//	        "ID": {
		//	          "description": "账号ID。",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"acl": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketACLDelivered
				"bucket_acl_delivered": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Grants
				"grants": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Grantee
							"grantee": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Canned
									"canned": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "预定义组。包括AllUsers、AuthenticatedUsers。",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"AllUsers",
												"AuthenticatedUsers",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: DisplayName
									"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "展示名。",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ID
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "账号ID。",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "用户类型。包括Group、CanonicalUser。",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"Group",
												"CanonicalUser",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "被授权用户信息。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Permission
							"permission": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "授权类型。包括READ、READ_NON_LIST、WRITE、READ_ACP、WRITE_ACP、FULL_CONTROL。",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"READ",
										"READ_NON_LIST",
										"WRITE",
										"READ_ACP",
										"WRITE_ACP",
										"FULL_CONTROL",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "对象的访问控制权限根节点。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
						setplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Owner
				"owner": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DisplayName
						"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "展示名。",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: ID
						"id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "账号ID。",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "对象所有者。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "桶的访问控制权限。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ACLGrant
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "ACL": {
		//	      "description": "桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。",
		//	      "enum": [
		//	        "private",
		//	        "public-read",
		//	        "public-read-write",
		//	        "authenticated-read",
		//	        "bucket-owner-read",
		//	        "bucket-owner-full-control",
		//	        "log-delivery-write",
		//	        "bucket-owner-entrusted",
		//	        "default"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "GrantFullControl": {
		//	      "description": "授予指定用户所有权限。",
		//	      "type": "string"
		//	    },
		//	    "GrantRead": {
		//	      "description": "授予指定用户读权限。",
		//	      "type": "string"
		//	    },
		//	    "GrantReadAcp": {
		//	      "description": "授予指定用户查看桶 ACL 的权限。",
		//	      "type": "string"
		//	    },
		//	    "GrantWrite": {
		//	      "description": "授予指定用户写权限。",
		//	      "type": "string"
		//	    },
		//	    "GrantWriteAcp": {
		//	      "description": "授予指定用户修改和删除桶 ACL 的权限。",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"acl_grant": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ACL
				"acl": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"private",
							"public-read",
							"public-read-write",
							"authenticated-read",
							"bucket-owner-read",
							"bucket-owner-full-control",
							"log-delivery-write",
							"bucket-owner-entrusted",
							"default",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: GrantFullControl
				"grant_full_control": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "授予指定用户所有权限。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: GrantRead
				"grant_read": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "授予指定用户读权限。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: GrantReadAcp
				"grant_read_acp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "授予指定用户查看桶 ACL 的权限。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: GrantWrite
				"grant_write": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "授予指定用户写权限。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: GrantWriteAcp
				"grant_write_acp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "授予指定用户修改和删除桶 ACL 的权限。",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AzRedundancy
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。",
		//	  "enum": [
		//	    "single-az",
		//	    "multi-az"
		//	  ],
		//	  "type": "string"
		//	}
		"az_redundancy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"single-az",
					"multi-az",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BucketType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。",
		//	  "enum": [
		//	    "fns",
		//	    "hns"
		//	  ],
		//	  "type": "string"
		//	}
		"bucket_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"fns",
					"hns",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreationDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的创建时间。",
		//	  "type": "string"
		//	}
		"creation_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的创建时间。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnableVersionStatus
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的版本控制状态。",
		//	  "enum": [
		//	    "Enabled",
		//	    "Suspended"
		//	  ],
		//	  "type": "string"
		//	}
		"enable_version_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "存储桶的版本控制状态。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"Enabled",
					"Suspended",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ExtranetEndpoint
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的 TOS 协议公网访问域名。",
		//	  "type": "string"
		//	}
		"extranet_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "存储桶的 TOS 协议公网访问域名。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IntranetEndpoint
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的 TOS 协议私网访问域名",
		//	  "type": "string"
		//	}
		"intranet_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "存储桶的 TOS 协议私网访问域名",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Lifecycle
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的声明周期。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "AbortInCompleteMultipartUpload": {
		//	        "description": "指定未合并的分片任务（碎片）的过期属性。",
		//	        "properties": {
		//	          "DaysAfterInitiation": {
		//	            "description": "指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Expiration": {
		//	        "description": "基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。",
		//	        "properties": {
		//	          "Date": {
		//	            "description": "基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。",
		//	            "type": "string"
		//	          },
		//	          "Days": {
		//	            "description": "基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Filter": {
		//	        "description": "指定规则生效的过滤条件。",
		//	        "properties": {
		//	          "GreaterThanIncludeEqual": {
		//	            "description": "是否启用相等条件。包括Enabled、Disabled。",
		//	            "enum": [
		//	              "Enabled",
		//	              "Disabled",
		//	              ""
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "LessThanIncludeEqual": {
		//	            "description": "是否启用相等条件。包括Enabled、Disabled。",
		//	            "enum": [
		//	              "Enabled",
		//	              "Disabled",
		//	              ""
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "ObjectSizeGreaterThan": {
		//	            "description": "设置规则生效于大于指定大小的对象。",
		//	            "type": "integer"
		//	          },
		//	          "ObjectSizeLessThan": {
		//	            "description": "设置规则生效于小于指定大小的对象。",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ID": {
		//	        "description": "规则 ID。",
		//	        "type": "string"
		//	      },
		//	      "NoCurrentVersionExpiration": {
		//	        "properties": {
		//	          "NonCurrentDate": {
		//	            "description": "基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。",
		//	            "type": "string"
		//	          },
		//	          "NonCurrentDays": {
		//	            "description": "基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "NonCurrentVersionTransitions": {
		//	        "description": "基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "properties": {
		//	            "NonCurrentDate": {
		//	              "description": "基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。",
		//	              "type": "string"
		//	            },
		//	            "NonCurrentDays": {
		//	              "description": "基于最后修改时间的生命周期规则中历史版本对象沉降的天数。",
		//	              "type": "integer"
		//	            },
		//	            "StorageClass": {
		//	              "description": "存储类型。包括STANDARD、IA、ARCHIVE_FR、INTELLIGENT_TIERING、COLD_ARCHIVE、ARCHIVE、DEEP_COLD_ARCHIVE。",
		//	              "enum": [
		//	                "STANDARD",
		//	                "IA",
		//	                "ARCHIVE_FR",
		//	                "INTELLIGENT_TIERING",
		//	                "COLD_ARCHIVE",
		//	                "ARCHIVE",
		//	                "DEEP_COLD_ARCHIVE"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Prefix": {
		//	        "description": "规则所适用的前缀。",
		//	        "type": "string"
		//	      },
		//	      "Status": {
		//	        "description": "是否启用规则。包括Enabled、Disabled。",
		//	        "enum": [
		//	          "Enabled",
		//	          "Disabled"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Tags": {
		//	        "description": "标签。",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "properties": {
		//	            "Key": {
		//	              "description": "标签键。",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "标签值。",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Key",
		//	            "Value"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Transitions": {
		//	        "description": "基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "properties": {
		//	            "Date": {
		//	              "description": "基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。",
		//	              "type": "string"
		//	            },
		//	            "Days": {
		//	              "description": "基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。",
		//	              "type": "integer"
		//	            },
		//	            "StorageClass": {
		//	              "description": "基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE_FR、INTELLIGENT_TIERING、COLD_ARCHIVE、ARCHIVE、DEEP_COLD_ARCHIVE。",
		//	              "enum": [
		//	                "STANDARD",
		//	                "IA",
		//	                "ARCHIVE_FR",
		//	                "INTELLIGENT_TIERING",
		//	                "COLD_ARCHIVE",
		//	                "ARCHIVE",
		//	                "DEEP_COLD_ARCHIVE"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"lifecycle_config": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AbortInCompleteMultipartUpload
					"abort_in_complete_multipart_upload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DaysAfterInitiation
							"days_after_initiation": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "指定未合并的分片任务（碎片）的过期属性。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Expiration
					"expiration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Date
							"date": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Days
							"days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Filter
					"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: GreaterThanIncludeEqual
							"greater_than_include_equal": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "是否启用相等条件。包括Enabled、Disabled。",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"Enabled",
										"Disabled",
										"",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: LessThanIncludeEqual
							"less_than_include_equal": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "是否启用相等条件。包括Enabled、Disabled。",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"Enabled",
										"Disabled",
										"",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ObjectSizeGreaterThan
							"object_size_greater_than": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "设置规则生效于大于指定大小的对象。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ObjectSizeLessThan
							"object_size_less_than": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "设置规则生效于小于指定大小的对象。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "指定规则生效的过滤条件。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ID
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "规则 ID。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: NoCurrentVersionExpiration
					"no_current_version_expiration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NonCurrentDate
							"non_current_date": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NonCurrentDays
							"non_current_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: NonCurrentVersionTransitions
					"non_current_version_transitions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: NonCurrentDate
								"non_current_date": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: NonCurrentDays
								"non_current_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "基于最后修改时间的生命周期规则中历史版本对象沉降的天数。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: StorageClass
								"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "存储类型。包括STANDARD、IA、ARCHIVE_FR、INTELLIGENT_TIERING、COLD_ARCHIVE、ARCHIVE、DEEP_COLD_ARCHIVE。",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"STANDARD",
											"IA",
											"ARCHIVE_FR",
											"INTELLIGENT_TIERING",
											"COLD_ARCHIVE",
											"ARCHIVE",
											"DEEP_COLD_ARCHIVE",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
							setplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Prefix
					"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "规则所适用的前缀。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Status
					"status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "是否启用规则。包括Enabled、Disabled。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"Enabled",
								"Disabled",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Tags
					"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "标签键。",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "标签值。",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "标签。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
							setplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Transitions
					"transitions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Date
								"date": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Days
								"days": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: StorageClass
								"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE_FR、INTELLIGENT_TIERING、COLD_ARCHIVE、ARCHIVE、DEEP_COLD_ARCHIVE。",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"STANDARD",
											"IA",
											"ARCHIVE_FR",
											"INTELLIGENT_TIERING",
											"COLD_ARCHIVE",
											"ARCHIVE",
											"DEEP_COLD_ARCHIVE",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
							setplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "存储桶的声明周期。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Location
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶所在区域。",
		//	  "type": "string"
		//	}
		"location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶所在区域。",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶名。",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶名。",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(3, 63),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶所属项目。",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "存储桶所属项目。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StorageClass
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT_TIERING：智能分层存储。ARCHIVE_FR：归档闪回存储。ARCHIVE：归档存储。COLD_ARCHIVE：冷归档存储。DEEP_COLD_ARCHIVE：深度冷归档存储。",
		//	  "enum": [
		//	    "STANDARD",
		//	    "IA",
		//	    "ARCHIVE_FR",
		//	    "INTELLIGENT_TIERING",
		//	    "COLD_ARCHIVE",
		//	    "ARCHIVE",
		//	    "DEEP_COLD_ARCHIVE"
		//	  ],
		//	  "type": "string"
		//	}
		"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT_TIERING：智能分层存储。ARCHIVE_FR：归档闪回存储。ARCHIVE：归档存储。COLD_ARCHIVE：冷归档存储。DEEP_COLD_ARCHIVE：深度冷归档存储。",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"STANDARD",
					"IA",
					"ARCHIVE_FR",
					"INTELLIGENT_TIERING",
					"COLD_ARCHIVE",
					"ARCHIVE",
					"DEEP_COLD_ARCHIVE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的标签信息。",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "description": "标签键。",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "标签值。",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签键。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "标签值。",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "存储桶的标签信息。",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to Cloud Control primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::TOS::Bucket").WithTerraformTypeName("volcenginecc_tos_bucket")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"abort_in_complete_multipart_upload": "AbortInCompleteMultipartUpload",
		"acl":                                "ACL",
		"acl_grant":                          "ACLGrant",
		"az_redundancy":                      "AzRedundancy",
		"bucket_acl_delivered":               "BucketACLDelivered",
		"bucket_type":                        "BucketType",
		"canned":                             "Canned",
		"creation_date":                      "CreationDate",
		"date":                               "Date",
		"days":                               "Days",
		"days_after_initiation":              "DaysAfterInitiation",
		"display_name":                       "DisplayName",
		"enable_version_status":              "EnableVersionStatus",
		"expiration":                         "Expiration",
		"extranet_endpoint":                  "ExtranetEndpoint",
		"filter":                             "Filter",
		"grant_full_control":                 "GrantFullControl",
		"grant_read":                         "GrantRead",
		"grant_read_acp":                     "GrantReadAcp",
		"grant_write":                        "GrantWrite",
		"grant_write_acp":                    "GrantWriteAcp",
		"grantee":                            "Grantee",
		"grants":                             "Grants",
		"greater_than_include_equal":         "GreaterThanIncludeEqual",
		"id":                                 "ID",
		"intranet_endpoint":                  "IntranetEndpoint",
		"key":                                "Key",
		"less_than_include_equal":            "LessThanIncludeEqual",
		"lifecycle_config":                   "Lifecycle",
		"location":                           "Location",
		"name":                               "Name",
		"no_current_version_expiration":      "NoCurrentVersionExpiration",
		"non_current_date":                   "NonCurrentDate",
		"non_current_days":                   "NonCurrentDays",
		"non_current_version_transitions":    "NonCurrentVersionTransitions",
		"object_size_greater_than":           "ObjectSizeGreaterThan",
		"object_size_less_than":              "ObjectSizeLessThan",
		"owner":                              "Owner",
		"permission":                         "Permission",
		"prefix":                             "Prefix",
		"project_name":                       "ProjectName",
		"status":                             "Status",
		"storage_class":                      "StorageClass",
		"tags":                               "Tags",
		"transitions":                        "Transitions",
		"type":                               "Type",
		"value":                              "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
