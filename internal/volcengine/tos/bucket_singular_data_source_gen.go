// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package tos

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/generic"
	"github.com/volcengine/terraform-provider-volcenginecc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("volcenginecc_tos_bucket", bucketDataSource)
}

// bucketDataSource returns the Terraform volcenginecc_tos_bucket data source.
// This Terraform data source corresponds to the Cloud Control Volcengine::TOS::Bucket resource.
func bucketDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ACL
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "BucketACLDelivered": {
		//	      "type": "boolean"
		//	    },
		//	    "Grants": {
		//	      "items": {
		//	        "properties": {
		//	          "Grantee": {
		//	            "properties": {
		//	              "Canned": {
		//	                "enum": [
		//	                  "AllUsers",
		//	                  "AuthenticatedUsers"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "DisplayName": {
		//	                "type": "string"
		//	              },
		//	              "ID": {
		//	                "description": "账号ID",
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "Group",
		//	                  "CanonicalUser"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Permission": {
		//	            "description": "桶访问权限",
		//	            "enum": [
		//	              "READ",
		//	              "WRITE",
		//	              "READ_ACP",
		//	              "WRITE_ACP",
		//	              "FULL_CONTROL"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "Owner": {
		//	      "properties": {
		//	        "DisplayName": {
		//	          "type": "string"
		//	        },
		//	        "ID": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"acl": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketACLDelivered
				"bucket_acl_delivered": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Grants
				"grants": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Grantee
							"grantee": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Canned
									"canned": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DisplayName
									"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ID
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "账号ID",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Permission
							"permission": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "桶访问权限",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Owner
				"owner": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DisplayName
						"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ID
						"id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ACLGrant
		// Cloud Control resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "ACL": {
		//	      "enum": [
		//	        "private",
		//	        "public-read",
		//	        "public-read-write",
		//	        "authenticated-read",
		//	        "bucket-owner-read",
		//	        "bucket-owner-full-control",
		//	        "log-delivery-write",
		//	        "bucket-owner-entrusted",
		//	        "default"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "GrantFullControl": {
		//	      "type": "string"
		//	    },
		//	    "GrantRead": {
		//	      "type": "string"
		//	    },
		//	    "GrantReadAcp": {
		//	      "type": "string"
		//	    },
		//	    "GrantWrite": {
		//	      "type": "string"
		//	    },
		//	    "GrantWriteAcp": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"acl_grant": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ACL
				"acl": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: GrantFullControl
				"grant_full_control": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: GrantRead
				"grant_read": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: GrantReadAcp
				"grant_read_acp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: GrantWrite
				"grant_write": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: GrantWriteAcp
				"grant_write_acp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AzRedundancy
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的可用区冗余类型",
		//	  "enum": [
		//	    "single-az",
		//	    "multi-az"
		//	  ],
		//	  "type": "string"
		//	}
		"az_redundancy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的可用区冗余类型",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: BucketType
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的类型",
		//	  "enum": [
		//	    "fns",
		//	    "hns"
		//	  ],
		//	  "type": "string"
		//	}
		"bucket_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的类型",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreationDate
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的创建时间",
		//	  "type": "string"
		//	}
		"creation_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的创建时间",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnableVersion
		// Cloud Control resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "Enabled",
		//	    "Suspended"
		//	  ],
		//	  "type": "string"
		//	}
		"enable_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ExtranetEndpoint
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "外部域名",
		//	  "type": "string"
		//	}
		"extranet_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "外部域名",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntranetEndpoint
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "内部域名",
		//	  "type": "string"
		//	}
		"intranet_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "内部域名",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Lifecycle
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的声明周期",
		//	  "items": {
		//	    "properties": {
		//	      "AbortInCompleteMultipartUpload": {
		//	        "properties": {
		//	          "DaysAfterInitiation": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Expiration": {
		//	        "properties": {
		//	          "Date": {
		//	            "type": "string"
		//	          },
		//	          "Days": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Filter": {
		//	        "properties": {
		//	          "GreaterThanIncludeEqual": {
		//	            "enum": [
		//	              "Enabled",
		//	              "Disabled"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "LessThanIncludeEqual": {
		//	            "enum": [
		//	              "Enabled",
		//	              "Disabled"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "ObjectSizeGreaterThan": {
		//	            "type": "integer"
		//	          },
		//	          "ObjectSizeLessThan": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ID": {
		//	        "type": "string"
		//	      },
		//	      "NoCurrentVersionExpiration": {
		//	        "properties": {
		//	          "NonCurrentDate": {
		//	            "type": "string"
		//	          },
		//	          "NonCurrentDays": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "NonCurrentVersionTransitions": {
		//	        "items": {
		//	          "properties": {
		//	            "NonCurrentDate": {
		//	              "type": "string"
		//	            },
		//	            "NonCurrentDays": {
		//	              "type": "integer"
		//	            },
		//	            "StorageClass": {
		//	              "enum": [
		//	                "STANDARD",
		//	                "IA",
		//	                "ARCHIVE_FR",
		//	                "INTELLIGENT_TIERING",
		//	                "COLD_ARCHIVE",
		//	                "ARCHIVE",
		//	                "DEEP_COLD_ARCHIVE"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "Prefix": {
		//	        "type": "string"
		//	      },
		//	      "Status": {
		//	        "enum": [
		//	          "Enabled",
		//	          "Disabled"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Tags": {
		//	        "items": {
		//	          "properties": {
		//	            "Key": {
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Key",
		//	            "Value"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "Transitions": {
		//	        "items": {
		//	          "properties": {
		//	            "Date": {
		//	              "type": "string"
		//	            },
		//	            "Days": {
		//	              "type": "integer"
		//	            },
		//	            "StorageClass": {
		//	              "enum": [
		//	                "STANDARD",
		//	                "IA",
		//	                "ARCHIVE_FR",
		//	                "INTELLIGENT_TIERING",
		//	                "COLD_ARCHIVE",
		//	                "ARCHIVE",
		//	                "DEEP_COLD_ARCHIVE"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      }
		//	    },
		//	    "required": [
		//	      "ID",
		//	      "Status"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"lifecycle_config": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AbortInCompleteMultipartUpload
					"abort_in_complete_multipart_upload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DaysAfterInitiation
							"days_after_initiation": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Expiration
					"expiration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Date
							"date": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Days
							"days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Filter
					"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: GreaterThanIncludeEqual
							"greater_than_include_equal": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: LessThanIncludeEqual
							"less_than_include_equal": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ObjectSizeGreaterThan
							"object_size_greater_than": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ObjectSizeLessThan
							"object_size_less_than": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ID
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: NoCurrentVersionExpiration
					"no_current_version_expiration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NonCurrentDate
							"non_current_date": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: NonCurrentDays
							"non_current_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: NonCurrentVersionTransitions
					"non_current_version_transitions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: NonCurrentDate
								"non_current_date": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NonCurrentDays
								"non_current_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StorageClass
								"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Prefix
					"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Status
					"status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Tags
					"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Transitions
					"transitions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Date
								"date": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Days
								"days": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StorageClass
								"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "存储桶的声明周期",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Location
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶所在区域",
		//	  "type": "string"
		//	}
		"location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶所在区域",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶名",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶名",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶关联的项目名称",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶关联的项目名称",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StorageClass
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "桶的默认存储类型",
		//	  "enum": [
		//	    "STANDARD",
		//	    "IA",
		//	    "ARCHIVE_FR",
		//	    "INTELLIGENT_TIERING",
		//	    "COLD_ARCHIVE",
		//	    "ARCHIVE",
		//	    "DEEP_COLD_ARCHIVE"
		//	  ],
		//	  "type": "string"
		//	}
		"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "桶的默认存储类型",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// Cloud Control resource type schema:
		//
		//	{
		//	  "description": "存储桶的标签信息",
		//	  "items": {
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "存储桶的标签信息",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for Volcengine::TOS::Bucket",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudControlTypeName("Volcengine::TOS::Bucket").WithTerraformTypeName("volcenginecc_tos_bucket")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"abort_in_complete_multipart_upload": "AbortInCompleteMultipartUpload",
		"acl":                                "ACL",
		"acl_grant":                          "ACLGrant",
		"az_redundancy":                      "AzRedundancy",
		"bucket_acl_delivered":               "BucketACLDelivered",
		"bucket_type":                        "BucketType",
		"canned":                             "Canned",
		"creation_date":                      "CreationDate",
		"date":                               "Date",
		"days":                               "Days",
		"days_after_initiation":              "DaysAfterInitiation",
		"display_name":                       "DisplayName",
		"enable_version":                     "EnableVersion",
		"expiration":                         "Expiration",
		"extranet_endpoint":                  "ExtranetEndpoint",
		"filter":                             "Filter",
		"grant_full_control":                 "GrantFullControl",
		"grant_read":                         "GrantRead",
		"grant_read_acp":                     "GrantReadAcp",
		"grant_write":                        "GrantWrite",
		"grant_write_acp":                    "GrantWriteAcp",
		"grantee":                            "Grantee",
		"grants":                             "Grants",
		"greater_than_include_equal":         "GreaterThanIncludeEqual",
		"id":                                 "ID",
		"intranet_endpoint":                  "IntranetEndpoint",
		"key":                                "Key",
		"less_than_include_equal":            "LessThanIncludeEqual",
		"lifecycle_config":                   "Lifecycle",
		"location":                           "Location",
		"name":                               "Name",
		"no_current_version_expiration":      "NoCurrentVersionExpiration",
		"non_current_date":                   "NonCurrentDate",
		"non_current_days":                   "NonCurrentDays",
		"non_current_version_transitions":    "NonCurrentVersionTransitions",
		"object_size_greater_than":           "ObjectSizeGreaterThan",
		"object_size_less_than":              "ObjectSizeLessThan",
		"owner":                              "Owner",
		"permission":                         "Permission",
		"prefix":                             "Prefix",
		"project_name":                       "ProjectName",
		"status":                             "Status",
		"storage_class":                      "StorageClass",
		"tags":                               "Tags",
		"transitions":                        "Transitions",
		"type":                               "Type",
		"value":                              "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
